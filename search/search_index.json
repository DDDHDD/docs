{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6570\u636e\u91c7\u96c6\u4ece\u5165\u95e8\u5230\u653e\u5f03 \u5185\u5bb9\u4ecb\u7ecd \u672c\u4e66\u4f1a\u4ecb\u7ecd\u6211\u76ee\u524d\u6240\u77e5\u7684\u6240\u6709\u5173\u4e8e\u722c\u866b\u7684\u4e1c\u897f\uff0c\u66f4\u50cf\u662f\u6211\u7684\u6280\u80fd\u6e05\u5355\uff0c\u4ed4\u7ec6\u628a\u5176\u4e2d\u6240\u6709\u7684\u5185\u5bb9\u8fc7\u4e00\u904d\uff0c\u76ee\u6807\u662f\u4f20\u64ad\u77e5\u8bc6\u3002 \u5927\u6982\u4f1a\u5206\u4e3a\u8fd9\u4e48\u51e0\u4e2a\u5927\u65b9\u5411\uff08\u5165\u95e8\uff09\uff1a \u722c\u866b\u4ecb\u7ecd\u3001\u5c31\u4e1a\u60c5\u51b5\u3001\u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898 HTTP\u534f\u8bae\u4ecb\u7ecd Requests\u4f7f\u7528 \u89e3\u6790\u5668Xpath\u4ecb\u7ecd MongoDB\u4e0eMySQL \u591a\u7ebf\u7a0b\u722c\u866b Scrapy\u4ecb\u7ecd Scrapy-redis\u4ecb\u7ecd \u53ef\u80fd\u8fd8\u4f1a\u589e\u52a0\u4e00\u4e9b\u522b\u7684\uff08\u653e\u5f03\uff09\uff0c\u5982\uff1a \u7b80\u5355\u9a8c\u8bc1\u7801\u5904\u7406\uff08\u8fd9\u4e2a\u6211\u4e5f\u5728\u5b66\uff09 IOS\u9006\u5411 Chrome\u65ad\u70b9\u8c03\u8bd5\u548c\u52a0\u5bc6\u5206\u6790 Docker\u4f7f\u7528 Selenium\u4e0eAppium\u3001pyppeteer \u5e03\u9686\u8fc7\u6ee4\u5668 Charles\u3001mitmproxy\u6293\u5305 \u5168\u7ad9\u722c\u53d6\u601d\u8def Flask\u5f00\u53d1 Spark\u76f8\u5173 \u5176\u4ed6\u8bed\u8a00\u5982Go\u3001JAVA\u722c\u866b \u8fd9\u5176\u4e2d\u7684\u6bcf\u4e00\u70b9\u90fd\u9700\u8981\u82b1\u5f88\u591a\u65f6\u95f4\u53bb\u7814\u7a76\uff0c\u5e0c\u671b\u6211\u4eec\u4e00\u8d77\u8fdb\u6b65\u3002 \u6211\u4e0d\u4f1a\u8bb2Python\u57fa\u7840\u8bed\u6cd5\u90a3\u4e9b\uff0c\u5efa\u8bae\u53bb BeginnersGuide \u548c documentation \u770b\u3002 \u5f00\u53d1\u73af\u5883 Python3\u7cfb\u5217 \u5efa\u8baemacOS\u6216Linux\u7cfb\u7edf PyCharm\u5f00\u53d1 \u8bf4\u8bf4\u6807\u9898 \u5148\u89e3\u91ca\u4e0b\u6807\u9898\uff0c\u4e3a\u4ec0\u4e48\u662f\u5165\u95e8\u5230\u653e\u5f03\u3002 \u9996\u5148\u8fd9\u5e76\u4e0d\u662f\u4e00\u53e5\u8c03\u4f83\u7684\u8bdd\uff0c\u800c\u662f\u6211\u73b0\u5728\u7684\u5185\u5fc3\u611f\u53d7\u3002\u6211\u505a\u722c\u866b\u5feb\u4e24\u5e74\u4e86\uff0c\u662f\u4ece\u8fd0\u8425\u8f6c\u8fc7\u6765\u7684\u3002\u6211\u89c9\u5f97\u6211\u5bf9\u722c\u866b\u6709\u8fd9\u4e09\u4e2a\u9636\u6bb5\uff1a \u559c\u6b22 \u3002\u521a\u5f00\u59cb\u8fd8\u6ca1\u6709\u771f\u6b63\u63a5\u89e6\u5230\u771f\u5b9e\u4f01\u4e1a\u9700\u6c42\u65f6\uff0c\u7531\u4e8e\u77e5\u4e4e\u7684\u6e32\u67d3\uff08\u4f60\u61c2\u5f97\uff09\uff0c\u6211\u5bf9\u722c\u866b\u771f\u7684\u8d85\u7ea7\u611f\u5174\u8da3\uff0c\u6253\u5f00\u7684\u6bcf\u4e2a\u65b0\u7f51\u7ad9\u90fd\u60f3\u53bb\u8bd5\u8bd5\u5982\u4f55\u722c\u53d6\uff0c\u6709\u4ec0\u4e48\u53cd\u722c\u6ca1\u3002\u8fd9\u4e2a\u9636\u6bb5\u6301\u7eed\u5230\u5f00\u59cb\u505a\u5b9e\u9645\u9879\u76ee\uff0c\u5c31\u6162\u6162\u5730\u8f6c\u53d8\u4e3a\u4e0b\u4e2a\u9636\u6bb5\u3002\u8fd9\u91cc\u6211\u60f3\u8bf4\u4e0b\uff0c\u80af\u5b9a\u6709\u522b\u4eba\u548c\u6211\u4e00\u6837\u5bf9\u722c\u866b\u4fdd\u6301\u6709\u5f88\u9ad8\u7684\u70ed\u60c5\uff0c\u559c\u6b22\u53bb\u722c\u53d6\u4e00\u4e9b\u7f51\u7ad9\u7684\u6570\u636e\uff0c\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u662f\u6570\u636e\u7684\u95ee\u9898\u3002\u5f88\u591a\u65f6\u5019\u6570\u636e\u4e0d\u5b8c\u6574\uff0c\u6216\u8005\u6570\u636e\u4e0d\u6301\u4e45\uff0c\u6ca1\u6709\u6301\u7eed\u7684\u6570\u636e\u5206\u6790\uff0c\u4f60\u722c\u53d6\u7684\u6570\u636e\u5c31\u662f\u6ca1\u6709\u4ef7\u503c\u7684\uff0c\u8fd9\u662f\u6211\u505a\u4e86\u51e0\u4e2a\u957f\u671f\u9879\u76ee\u7684\u611f\u53d7\u3002 \u65e0\u611f \u3002\u7231\u597d\u53d8\u4e3a\u804c\u4e1a\u662f\u4e00\u4e2a\u5f88\u75db\u82e6\u7684\u4e8b\u60c5\uff0c\u4e4b\u524d\u505a\u8fd0\u8425\u65f6\u8d85\u7ea7\u7fa1\u6155\u722c\u866b\u5de5\u7a0b\u5e08\u4eec\uff0c\u611f\u89c9\u4ed6\u4eec\u597d\u5e78\u798f\u3002\u5f53\u81ea\u5df1\u771f\u6b63\u5f00\u59cb\u505a\u4e86\uff0c\u521a\u5f00\u59cb\u8fd8\u662f\u633a\u597d\u7684\uff0c\u8fc7\u4e00\u5e74\u5fc3\u6001\u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u539f\u56e0\u5f88\u591a\uff0c\u8fd9\u4e2a\u6709\u65f6\u95f4\u518d\u6162\u6162\u8bf4\u5427\u3002\u8fd9\u9996\u6b4c\u5c31\u662f\u7ea2\u73ab\u7470\uff1a \u5f97\u4e0d\u5230\u7684\u6c38\u8fdc\u5728\u9a9a\u52a8\uff0c\u88ab\u504f\u7231\u7684\u90fd\u6709\u6043\u65e0\u6050 \uff0c\u81ea\u884c\u4f53\u4f1a\u5427\u3002 \u653e\u5f03 \u3002\u9636\u6bb5\u4e8c\u4e0e\u9636\u6bb5\u4e09\u662f\u540c\u65f6\u4f1a\u6709\u7684\u611f\u53d7\uff0c\u56e0\u4e3a\u5bf9\u722c\u866b\u6ca1\u6709\u4e4b\u524d\u90a3\u4e48\u591a\u5174\u8da3\uff0c\u5c31\u4f1a\u6162\u6162\u7684\u60f3\u5f00\u59cb\u53bb\u505a\u522b\u7684\u4e8b\u60c5\u3002\u6211\u7684\u535a\u5ba2\u4e2d\u7684\u63cf\u8ff0\u662f\u201c\u6570\u636e\u91c7\u96c6\u3001\u6570\u636e\u5904\u7406\u3001\u673a\u5668\u5b66\u4e60\u201d\uff0c\u6570\u636e\u91c7\u96c6\u53ea\u662f\u7b2c\u4e00\u6b65\uff0c\u6570\u636e\u5904\u7406\u3001\u673a\u5668\u5b66\u4e60\u624d\u662f\u91cd\u70b9\uff08\u9ad8\u85aa\u804c\u4e1a\uff09\uff0c\u662f\u672a\u6765\u6709\u524d\u666f\u7684\u65b9\u5411\u3002\u6240\u4ee5\u6211\u624d\u4f1a\u53bb\u5b66Spark\uff0c\u53bb\u5b66Scala\uff0c\u4e5f\u662f\u5e0c\u671b\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u5019\u53ef\u4ee5\u8f6c\u884c\u53bb\u771f\u6b63\u63a5\u89e6\u201c\u6570\u636e\u201d\uff0c\u7814\u7a76\u6570\u636e\u3002 \u4e2a\u4eba\u4ecb\u7ecd \u6211\u53eb\u5c0f\u6b6a\uff0c\u516c\u4f17\u53f7\uff1a Python\u722c\u866b\u4e0e\u7b97\u6cd5\u8fdb\u9636 \uff0c\u77e5\u4e4e\u4e0a\u4e5f\u53eb\u5c0f\u6b6a\u3002","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"","title":"\u6570\u636e\u91c7\u96c6\u4ece\u5165\u95e8\u5230\u653e\u5f03"},{"location":"#_2","text":"\u672c\u4e66\u4f1a\u4ecb\u7ecd\u6211\u76ee\u524d\u6240\u77e5\u7684\u6240\u6709\u5173\u4e8e\u722c\u866b\u7684\u4e1c\u897f\uff0c\u66f4\u50cf\u662f\u6211\u7684\u6280\u80fd\u6e05\u5355\uff0c\u4ed4\u7ec6\u628a\u5176\u4e2d\u6240\u6709\u7684\u5185\u5bb9\u8fc7\u4e00\u904d\uff0c\u76ee\u6807\u662f\u4f20\u64ad\u77e5\u8bc6\u3002 \u5927\u6982\u4f1a\u5206\u4e3a\u8fd9\u4e48\u51e0\u4e2a\u5927\u65b9\u5411\uff08\u5165\u95e8\uff09\uff1a \u722c\u866b\u4ecb\u7ecd\u3001\u5c31\u4e1a\u60c5\u51b5\u3001\u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898 HTTP\u534f\u8bae\u4ecb\u7ecd Requests\u4f7f\u7528 \u89e3\u6790\u5668Xpath\u4ecb\u7ecd MongoDB\u4e0eMySQL \u591a\u7ebf\u7a0b\u722c\u866b Scrapy\u4ecb\u7ecd Scrapy-redis\u4ecb\u7ecd \u53ef\u80fd\u8fd8\u4f1a\u589e\u52a0\u4e00\u4e9b\u522b\u7684\uff08\u653e\u5f03\uff09\uff0c\u5982\uff1a \u7b80\u5355\u9a8c\u8bc1\u7801\u5904\u7406\uff08\u8fd9\u4e2a\u6211\u4e5f\u5728\u5b66\uff09 IOS\u9006\u5411 Chrome\u65ad\u70b9\u8c03\u8bd5\u548c\u52a0\u5bc6\u5206\u6790 Docker\u4f7f\u7528 Selenium\u4e0eAppium\u3001pyppeteer \u5e03\u9686\u8fc7\u6ee4\u5668 Charles\u3001mitmproxy\u6293\u5305 \u5168\u7ad9\u722c\u53d6\u601d\u8def Flask\u5f00\u53d1 Spark\u76f8\u5173 \u5176\u4ed6\u8bed\u8a00\u5982Go\u3001JAVA\u722c\u866b \u8fd9\u5176\u4e2d\u7684\u6bcf\u4e00\u70b9\u90fd\u9700\u8981\u82b1\u5f88\u591a\u65f6\u95f4\u53bb\u7814\u7a76\uff0c\u5e0c\u671b\u6211\u4eec\u4e00\u8d77\u8fdb\u6b65\u3002 \u6211\u4e0d\u4f1a\u8bb2Python\u57fa\u7840\u8bed\u6cd5\u90a3\u4e9b\uff0c\u5efa\u8bae\u53bb BeginnersGuide \u548c documentation \u770b\u3002","title":"\u5185\u5bb9\u4ecb\u7ecd"},{"location":"#_3","text":"Python3\u7cfb\u5217 \u5efa\u8baemacOS\u6216Linux\u7cfb\u7edf PyCharm\u5f00\u53d1","title":"\u5f00\u53d1\u73af\u5883"},{"location":"#_4","text":"\u5148\u89e3\u91ca\u4e0b\u6807\u9898\uff0c\u4e3a\u4ec0\u4e48\u662f\u5165\u95e8\u5230\u653e\u5f03\u3002 \u9996\u5148\u8fd9\u5e76\u4e0d\u662f\u4e00\u53e5\u8c03\u4f83\u7684\u8bdd\uff0c\u800c\u662f\u6211\u73b0\u5728\u7684\u5185\u5fc3\u611f\u53d7\u3002\u6211\u505a\u722c\u866b\u5feb\u4e24\u5e74\u4e86\uff0c\u662f\u4ece\u8fd0\u8425\u8f6c\u8fc7\u6765\u7684\u3002\u6211\u89c9\u5f97\u6211\u5bf9\u722c\u866b\u6709\u8fd9\u4e09\u4e2a\u9636\u6bb5\uff1a \u559c\u6b22 \u3002\u521a\u5f00\u59cb\u8fd8\u6ca1\u6709\u771f\u6b63\u63a5\u89e6\u5230\u771f\u5b9e\u4f01\u4e1a\u9700\u6c42\u65f6\uff0c\u7531\u4e8e\u77e5\u4e4e\u7684\u6e32\u67d3\uff08\u4f60\u61c2\u5f97\uff09\uff0c\u6211\u5bf9\u722c\u866b\u771f\u7684\u8d85\u7ea7\u611f\u5174\u8da3\uff0c\u6253\u5f00\u7684\u6bcf\u4e2a\u65b0\u7f51\u7ad9\u90fd\u60f3\u53bb\u8bd5\u8bd5\u5982\u4f55\u722c\u53d6\uff0c\u6709\u4ec0\u4e48\u53cd\u722c\u6ca1\u3002\u8fd9\u4e2a\u9636\u6bb5\u6301\u7eed\u5230\u5f00\u59cb\u505a\u5b9e\u9645\u9879\u76ee\uff0c\u5c31\u6162\u6162\u5730\u8f6c\u53d8\u4e3a\u4e0b\u4e2a\u9636\u6bb5\u3002\u8fd9\u91cc\u6211\u60f3\u8bf4\u4e0b\uff0c\u80af\u5b9a\u6709\u522b\u4eba\u548c\u6211\u4e00\u6837\u5bf9\u722c\u866b\u4fdd\u6301\u6709\u5f88\u9ad8\u7684\u70ed\u60c5\uff0c\u559c\u6b22\u53bb\u722c\u53d6\u4e00\u4e9b\u7f51\u7ad9\u7684\u6570\u636e\uff0c\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u662f\u6570\u636e\u7684\u95ee\u9898\u3002\u5f88\u591a\u65f6\u5019\u6570\u636e\u4e0d\u5b8c\u6574\uff0c\u6216\u8005\u6570\u636e\u4e0d\u6301\u4e45\uff0c\u6ca1\u6709\u6301\u7eed\u7684\u6570\u636e\u5206\u6790\uff0c\u4f60\u722c\u53d6\u7684\u6570\u636e\u5c31\u662f\u6ca1\u6709\u4ef7\u503c\u7684\uff0c\u8fd9\u662f\u6211\u505a\u4e86\u51e0\u4e2a\u957f\u671f\u9879\u76ee\u7684\u611f\u53d7\u3002 \u65e0\u611f \u3002\u7231\u597d\u53d8\u4e3a\u804c\u4e1a\u662f\u4e00\u4e2a\u5f88\u75db\u82e6\u7684\u4e8b\u60c5\uff0c\u4e4b\u524d\u505a\u8fd0\u8425\u65f6\u8d85\u7ea7\u7fa1\u6155\u722c\u866b\u5de5\u7a0b\u5e08\u4eec\uff0c\u611f\u89c9\u4ed6\u4eec\u597d\u5e78\u798f\u3002\u5f53\u81ea\u5df1\u771f\u6b63\u5f00\u59cb\u505a\u4e86\uff0c\u521a\u5f00\u59cb\u8fd8\u662f\u633a\u597d\u7684\uff0c\u8fc7\u4e00\u5e74\u5fc3\u6001\u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u539f\u56e0\u5f88\u591a\uff0c\u8fd9\u4e2a\u6709\u65f6\u95f4\u518d\u6162\u6162\u8bf4\u5427\u3002\u8fd9\u9996\u6b4c\u5c31\u662f\u7ea2\u73ab\u7470\uff1a \u5f97\u4e0d\u5230\u7684\u6c38\u8fdc\u5728\u9a9a\u52a8\uff0c\u88ab\u504f\u7231\u7684\u90fd\u6709\u6043\u65e0\u6050 \uff0c\u81ea\u884c\u4f53\u4f1a\u5427\u3002 \u653e\u5f03 \u3002\u9636\u6bb5\u4e8c\u4e0e\u9636\u6bb5\u4e09\u662f\u540c\u65f6\u4f1a\u6709\u7684\u611f\u53d7\uff0c\u56e0\u4e3a\u5bf9\u722c\u866b\u6ca1\u6709\u4e4b\u524d\u90a3\u4e48\u591a\u5174\u8da3\uff0c\u5c31\u4f1a\u6162\u6162\u7684\u60f3\u5f00\u59cb\u53bb\u505a\u522b\u7684\u4e8b\u60c5\u3002\u6211\u7684\u535a\u5ba2\u4e2d\u7684\u63cf\u8ff0\u662f\u201c\u6570\u636e\u91c7\u96c6\u3001\u6570\u636e\u5904\u7406\u3001\u673a\u5668\u5b66\u4e60\u201d\uff0c\u6570\u636e\u91c7\u96c6\u53ea\u662f\u7b2c\u4e00\u6b65\uff0c\u6570\u636e\u5904\u7406\u3001\u673a\u5668\u5b66\u4e60\u624d\u662f\u91cd\u70b9\uff08\u9ad8\u85aa\u804c\u4e1a\uff09\uff0c\u662f\u672a\u6765\u6709\u524d\u666f\u7684\u65b9\u5411\u3002\u6240\u4ee5\u6211\u624d\u4f1a\u53bb\u5b66Spark\uff0c\u53bb\u5b66Scala\uff0c\u4e5f\u662f\u5e0c\u671b\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u5019\u53ef\u4ee5\u8f6c\u884c\u53bb\u771f\u6b63\u63a5\u89e6\u201c\u6570\u636e\u201d\uff0c\u7814\u7a76\u6570\u636e\u3002","title":"\u8bf4\u8bf4\u6807\u9898"},{"location":"#_5","text":"\u6211\u53eb\u5c0f\u6b6a\uff0c\u516c\u4f17\u53f7\uff1a Python\u722c\u866b\u4e0e\u7b97\u6cd5\u8fdb\u9636 \uff0c\u77e5\u4e4e\u4e0a\u4e5f\u53eb\u5c0f\u6b6a\u3002","title":"\u4e2a\u4eba\u4ecb\u7ecd"},{"location":"content/","text":"\u76ee\u5f55 \u722c\u866b\u4ecb\u7ecd\u3001\u5c31\u4e1a\u60c5\u51b5 HTTP\u534f\u8bae\u4ecb\u7ecd Requests\u4f7f\u7528 \u89e3\u6790\u5668Xpath\u4ecb\u7ecd MongoDB\u4e0eMySQL \u591a\u7ebf\u7a0b\u722c\u866b Scrapy\u4ecb\u7ecd Scrapy-redis\u4ecb\u7ecd \u4ecb\u7ecd \u7b2c\u4e00\u7ae0\uff1a\u6570\u636e\u91c7\u96c6\u6982\u51b5 \u4ec0\u4e48\u662f\u6570\u636e\u91c7\u96c6 \u5982\u4f55\u5b66\u4e60\u6570\u636e\u91c7\u96c6 \u6570\u636e\u91c7\u96c6\u524d\u666f\u8ba8\u8bba \u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898 \u7b2c\u4e8c\u7ae0\uff1aHTTP\u534f\u8bae\u4ecb\u7ecd HTTP\u534f\u8bae HTTPS\u534f\u8bae Cookie\u72b6\u6001\u7ba1\u7406 HTTP\u62a5\u6587 \u7b2c\u4e09\u7ae0\uff1aRequests\u4f7f\u7528 \u57fa\u7840\u7528\u6cd5 \u6838\u5fc3API \u6ce8\u610f\u4e8b\u9879","title":"\u76ee\u5f55"},{"location":"content/#_1","text":"\u722c\u866b\u4ecb\u7ecd\u3001\u5c31\u4e1a\u60c5\u51b5 HTTP\u534f\u8bae\u4ecb\u7ecd Requests\u4f7f\u7528 \u89e3\u6790\u5668Xpath\u4ecb\u7ecd MongoDB\u4e0eMySQL \u591a\u7ebf\u7a0b\u722c\u866b Scrapy\u4ecb\u7ecd Scrapy-redis\u4ecb\u7ecd","title":"\u76ee\u5f55"},{"location":"content/#_2","text":"","title":"\u4ecb\u7ecd"},{"location":"content/#_3","text":"\u4ec0\u4e48\u662f\u6570\u636e\u91c7\u96c6 \u5982\u4f55\u5b66\u4e60\u6570\u636e\u91c7\u96c6 \u6570\u636e\u91c7\u96c6\u524d\u666f\u8ba8\u8bba \u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898","title":"\u7b2c\u4e00\u7ae0\uff1a\u6570\u636e\u91c7\u96c6\u6982\u51b5"},{"location":"content/#http","text":"HTTP\u534f\u8bae HTTPS\u534f\u8bae Cookie\u72b6\u6001\u7ba1\u7406 HTTP\u62a5\u6587","title":"\u7b2c\u4e8c\u7ae0\uff1aHTTP\u534f\u8bae\u4ecb\u7ecd"},{"location":"content/#requests","text":"\u57fa\u7840\u7528\u6cd5 \u6838\u5fc3API \u6ce8\u610f\u4e8b\u9879","title":"\u7b2c\u4e09\u7ae0\uff1aRequests\u4f7f\u7528"},{"location":"introduce_spider/introduce_spider/","text":"\u6570\u636e\u91c7\u96c6\u4ecb\u7ecd \u4ec0\u4e48\u662f\u6570\u636e\u91c7\u96c6 \u5b9a\u4e49 \u5c31\u6211\u4e2a\u4eba\u800c\u8bf4\uff0c\u66f4\u559c\u6b22\u8bf4\u6570\u636e\u91c7\u96c6\u800c\u4e0d\u662f\u201d\u722c\u866b\u201c\u3002\u5176\u5b9e\u66f4\u6807\u51c6\u7684\u53eb\u6cd5\u662f\u7f51\u7edc\u722c\u866b\uff0c\u5728wiki\u4e0a\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a \u7f51\u7edc\u722c\u866b \uff08\u82f1\u8bed\uff1aweb crawler\uff09\uff0c\u4e5f\u53eb\u7f51\u7edc\u8718\u86db\uff08spider\uff09\uff0c\u662f\u4e00\u79cd\u7528\u6765\u81ea\u52a8\u6d4f\u89c8 \u4e07\u7ef4\u7f51 \u7684 \u7f51\u7edc\u673a\u5668\u4eba \u3002\u5176\u76ee\u7684\u4e00\u822c\u4e3a\u7f16\u7e82 \u7f51\u7edc\u7d22\u5f15 \u3002 \u5c31\u6bd4\u5982\u767e\u5ea6\u3001\u8c37\u6b4c\uff0c\u90fd\u662f\u7f51\u7edc\u722c\u866b\uff0c\u628a\u4e92\u8054\u7f51\u4e0a\u6240\u6709\u7684\u6570\u636e\u91c7\u96c6\u4e0b\u6765\uff0c\u4fdd\u5b58\u5230\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\uff0c\u5e76\u6839\u636e\u5404\u79cd\u5404\u79cd\u89c4\u5219\u5efa\u7acb\u6392\u540d\u548c\u7d22\u5f15\uff0c\u5411\u7528\u6237\u63d0\u4f9b\u641c\u7d22\u670d\u52a1\u3002\u5927\u4f53\u4e0a\u5c31\u662f\u8fd9\u4e48\u4e2a\u610f\u601d\u3002 \u5206\u7c7b \u4e00\u822c\u4f1a\u5206\u4e3a\u4e24\u79cd\uff1a\u901a\u7528\u722c\u866b\u4e0e\u5782\u76f4\u722c\u866b \u901a\u7528\u722c\u866b\u3002\u7c7b\u4f3c\u767e\u5ea6\u3001\u8c37\u6b4c\u8fd9\u6837\u7684\u722c\u866b\uff0c\u6293\u53d6\u5bf9\u8c61\u662f\u6574\u4e2a\u4e92\u8054\u7f51\uff0c\u5bf9\u4e8e\u7f51\u9875\u6ca1\u6709\u56fa\u5b9a\u7684\u62bd\u53d6\u89c4\u5219\u3002 \u5bf9\u4e8e\u6240\u6709\u7f51\u9875\u90fd\u662f\u4e00\u5957\u901a\u7528\u7684\u5904\u7406\u65b9\u6cd5\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u770b\u6211\u4e4b\u524d\u5206\u4eab\u7684\u4ee3\u7801 \u7528Golang\u5199\u722c\u866b\uff08\u4e00\uff09 \u5782\u76f4\u722c\u866b\u3002\u8fd9\u7c7b\u722c\u866b\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u5bf9\u8c61\u3001\u7f51\u7ad9\uff0c\u6709\u4e00\u53f0\u6307\u5b9a\u7684\u722c\u53d6\u8def\u5f84\u3001\u6570\u636e\u62bd\u53d6\u89c4\u5219\u3002\u5bf9\u4e8e\u6211\u4eec\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u5199\u7684\u722c\u866b\u90fd\u662f\u5782\u76f4\u722c\u866b\uff0c\u5177\u4f53\u7684\u67d0\u4e2a\u7f51\u7ad9\u7684\u67d0\u4e2a\u6570\u636e\uff0c\u6bd4\u5982\u6dd8\u5b9d\u7684\u624b\u673a\u3001\u5f53\u5f53\u4e0a\u7684\u4e66\u7c4d\u7b49\u7b49\u3002 \u7b56\u7565 \u7f51\u7edc\u722c\u866b\u59cb\u4e8e\u4e00\u5f20\u88ab\u79f0\u4f5c\u79cd\u5b50\u7684\u7edf\u4e00\u8d44\u6e90\u5730\u5740\uff08URL\uff09\u5217\u8868\u3002\u5f53\u7f51\u7edc\u722c\u866b\u8bbf\u95ee\u8fd9\u4e9bURL\u65f6\uff0c\u5b83\u4eec\u4f1a\u7504\u522b\u51fa\u9875\u9762\u4e0a\u6240\u6709\u7684\u8d85\u94fe\u63a5\uff0c\u5e76\u5c06\u5b83\u4eec\u5199\u5165\u4e00\u5f20\u201c\u5f85\u8bbf\u5217\u8868\u201d\uff0c\u5373\u5c06\u8981\u8bbf\u95ee\u7684\u94fe\u63a5\u3002\u7136\u540e\u518d\u6b21\u8bbf\u95ee\u8fd9\u4e9bURL\uff0c\u63d0\u53d6\uff0c\u5faa\u73af\u5f80\u590d\u3002 \u5e38\u89c1\u7684\u722c\u866b\u722c\u53d6\u7b56\u7565\u6709DFS\u548cBFS\uff0c\u62ff\u4e00\u5f20\u56fe\u6765\u8bf4\u660e \u6df1\u5ea6\u4f18\u5148\u7b56\u7565(DFS) \u6df1\u5ea6\u4f18\u5148\u7b56\u7565\u662f\u6307\u722c\u866b\u4ece\u67d0\u4e2aURL\u5f00\u59cb\uff0c\u4e00\u4e2a\u94fe\u63a5\u4e00\u4e2a\u94fe\u63a5\u7684\u722c\u53d6\u4e0b\u53bb\uff0c\u76f4\u5230\u5904\u7406\u5b8c\u4e86\u67d0\u4e2a\u94fe\u63a5\u6240\u5728\u7684\u6240\u6709\u7ebf\u8def\uff0c\u624d\u5207\u6362\u5230\u5176\u5b83\u7684\u7ebf\u8def\u3002 \u6b64\u65f6\u6293\u53d6\u987a\u5e8f\u4e3a\uff1aA -> B -> C -> D -> E -> F -> G -> H -> I -> J \u5e7f\u5ea6\u4f18\u5148\u7b56\u7565(BFS) \u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u7b56\u7565\u7684\u57fa\u672c\u601d\u8def\u662f\uff0c\u5c06\u65b0\u4e0b\u8f7d\u7f51\u9875\u4e2d\u53d1\u73b0\u7684\u94fe\u63a5\u76f4\u63a5\u63d2\u5165\u5f85\u6293\u53d6URL\u961f\u5217\u7684\u672b\u5c3e\u3002\u4e5f\u5c31\u662f\u6307\u7f51\u7edc\u722c\u866b\u4f1a\u5148\u6293\u53d6\u8d77\u59cb\u7f51\u9875\u4e2d\u94fe\u63a5\u7684\u6240\u6709\u7f51\u9875\uff0c\u7136\u540e\u518d\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u94fe\u63a5\u7f51\u9875\uff0c\u7ee7\u7eed\u6293\u53d6\u5728\u6b64\u7f51\u9875\u4e2d\u94fe\u63a5\u7684\u6240\u6709\u7f51\u9875\u3002 \u6b64\u65f6\u6293\u53d6\u987a\u5e8f\u4e3a\uff1aA -> B -> E -> G -> H -> I -> C -> F -> J -> D \u548c\u7b97\u6cd5\u4e2d\u7684\u4fdd\u6301\u4e00\u81f4 \u5982\u4f55\u5b66\u4e60\u6570\u636e\u91c7\u96c6 \u5728\u77e5\u4e4e\u4e0a\u4e00\u76f4\u90fd\u6709\u5404\u79cd\u5404\u6837\u7684\u5165\u95e8\u6587\u7ae0\uff0c\u9c7c\u9f99\u6df7\u6742\u5427\u3002\u5177\u4f53\u7684\u5b66\u4e60\u53ef\u4ee5\u770b\u770b\u5d14\u5e86\u624d\u7684\u4e66\uff0c\u5199\u7684\u633a\u597d\u7684\u3002\u518d\u6709\u628a\u8fd9\u4e2a\u6559\u7a0b\u91cc \u5165\u95e8 \u7ae0\u8282\u770b\u5b8c\uff0c\u7f16\u5199\u4e00\u822c\u7684\u722c\u866b\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u60f3\u8981\u53bb\u7ee7\u7eed\u6df1\u5165\uff0c\u53ef\u4ee5\u53bb\u770b\u770b \u653e\u5f03 \u7ae0\u8282\u3002 \u5176\u5b9e\u8fd9\u4e9b\u65b9\u5411\u90fd\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u6700\u4e3b\u8981\u8fd8\u662f\u770b\u81ea\u5df1\u82b1\u591a\u5c11\u65f6\u95f4\u53bb\u5b66\u4e60\u3002\u6211\u4e0b\u73ed\u540e\u56de\u5230\u5bb6\uff0c\u6bcf\u5929\u90fd\u4f1a\u5199\u4ee3\u7801\u6216\u8005\u5b66\u65b0\u6280\u672f\uff0c\u4e00\u822c\u523012\u70b9\u3002 \u6570\u636e\u91c7\u96c6\u524d\u666f\u8ba8\u8bba \u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u6570\u636e\u5427\u3002 \u8fd9\u662f\u4ece\u67d0\u7f51\u7ad9\u4e0a\u6293\u53d6\u7684\uff08\u5168\u56fd\u6240\u6709\u804c\u4f4d\uff09\uff0c\u4ece2018\u5e746\u6708\u52302018\u5e7412\u6708\uff0c\u5173\u952e\u8bcd\u662f\u201d\u722c\u866b\u201c\u3001\u201d\u6570\u636e\u91c7\u96c6\u201c\u7684\u804c\u4f4d\u6570\u91cf\uff0c\u591a\u7684\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u804c\u4f4d\u660e\u663e\u662f\u5728\u51cf\u5c11\u3002\u6211\u4eec\u518d\u6765\u770b\u770b\u641c\u7d22\u201d\u524d\u7aef\u201c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u3002 \u6ce8\u610f\u770b\u7eb5\u5750\u6807\u7684\u6570\u91cf\uff0c\u6839\u672c\u5c31\u4e0d\u5728\u4e00\u4e2a\u7ea7\u522b\u3002\u4f46\u662f\u6ce8\u610f\u770b\u6574\u4f53\u8d8b\u52bf\uff0c\u90fd\u662f\u5728\u4e0b\u964d\uff0c\u4f30\u8ba1\u548c\u73b0\u5728\u7684\u4e92\u8054\u7f51\u5bd2\u51ac\u6709\u5173\u3002 \u6570\u636e\u91c7\u96c6\u804c\u4f4d\u6570\u91cf\u4e0a\u6765\u770b\u8981\u6bd4\u524d\u7aef\u65b9\u5411\u5c11\u5f88\u591a\uff0c\u56e0\u4e3a\u6bcf\u5bb6\u516c\u53f8\u90fd\u4f1a\u9700\u8981\u524d\u7aef\u3001\u4f46\u5e76\u975e\u4e00\u5b9a\u8981\u6570\u636e\u91c7\u96c6\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bf4\u540e\u7aef\uff0c\u4e3b\u8981\u662f\u540e\u7aef\u5305\u542b\u592a\u5e7f\uff0cPython\u3001JAVA\u3001GO\u3001PHP\u7b49\u7b49\u90fd\u53ef\u4ee5\u505a\uff0c\u6240\u4ee5\u7edf\u8ba1\u6570\u91cf\u53ef\u80fd\u4e0d\u597d\u7b97\u3002 \u5982\u679c\u4f60\u771f\u7684\u559c\u6b22\u6570\u636e\u91c7\u96c6\uff0c\u90a3\u4e48\u5c31\u52aa\u529b\u63d0\u5347\u81ea\u5df1\u7684\u6280\u80fd\uff0c\u8fd9\u624d\u662f\u6700\u91cd\u8981\u7684\u3002 \u5173\u4e8e\u722c\u866b\u5b66\u5230\u4ec0\u4e48\u7a0b\u5ea6\u53ef\u4ee5\u627e\u5de5\u4f5c\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u4e4b\u524d\u5199\u7684\uff0c \u722c\u866b\u5b66\u5230\u4ec0\u4e48\u7a0b\u5ea6\u53ef\u4ee5\u53bb\u627e\u5de5\u4f5c \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u722c\u866b\u4ecb\u7ecd"},{"location":"introduce_spider/introduce_spider/#_1","text":"","title":"\u6570\u636e\u91c7\u96c6\u4ecb\u7ecd"},{"location":"introduce_spider/introduce_spider/#_2","text":"","title":"\u4ec0\u4e48\u662f\u6570\u636e\u91c7\u96c6"},{"location":"introduce_spider/introduce_spider/#_3","text":"\u5c31\u6211\u4e2a\u4eba\u800c\u8bf4\uff0c\u66f4\u559c\u6b22\u8bf4\u6570\u636e\u91c7\u96c6\u800c\u4e0d\u662f\u201d\u722c\u866b\u201c\u3002\u5176\u5b9e\u66f4\u6807\u51c6\u7684\u53eb\u6cd5\u662f\u7f51\u7edc\u722c\u866b\uff0c\u5728wiki\u4e0a\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a \u7f51\u7edc\u722c\u866b \uff08\u82f1\u8bed\uff1aweb crawler\uff09\uff0c\u4e5f\u53eb\u7f51\u7edc\u8718\u86db\uff08spider\uff09\uff0c\u662f\u4e00\u79cd\u7528\u6765\u81ea\u52a8\u6d4f\u89c8 \u4e07\u7ef4\u7f51 \u7684 \u7f51\u7edc\u673a\u5668\u4eba \u3002\u5176\u76ee\u7684\u4e00\u822c\u4e3a\u7f16\u7e82 \u7f51\u7edc\u7d22\u5f15 \u3002 \u5c31\u6bd4\u5982\u767e\u5ea6\u3001\u8c37\u6b4c\uff0c\u90fd\u662f\u7f51\u7edc\u722c\u866b\uff0c\u628a\u4e92\u8054\u7f51\u4e0a\u6240\u6709\u7684\u6570\u636e\u91c7\u96c6\u4e0b\u6765\uff0c\u4fdd\u5b58\u5230\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\uff0c\u5e76\u6839\u636e\u5404\u79cd\u5404\u79cd\u89c4\u5219\u5efa\u7acb\u6392\u540d\u548c\u7d22\u5f15\uff0c\u5411\u7528\u6237\u63d0\u4f9b\u641c\u7d22\u670d\u52a1\u3002\u5927\u4f53\u4e0a\u5c31\u662f\u8fd9\u4e48\u4e2a\u610f\u601d\u3002","title":"\u5b9a\u4e49"},{"location":"introduce_spider/introduce_spider/#_4","text":"\u4e00\u822c\u4f1a\u5206\u4e3a\u4e24\u79cd\uff1a\u901a\u7528\u722c\u866b\u4e0e\u5782\u76f4\u722c\u866b \u901a\u7528\u722c\u866b\u3002\u7c7b\u4f3c\u767e\u5ea6\u3001\u8c37\u6b4c\u8fd9\u6837\u7684\u722c\u866b\uff0c\u6293\u53d6\u5bf9\u8c61\u662f\u6574\u4e2a\u4e92\u8054\u7f51\uff0c\u5bf9\u4e8e\u7f51\u9875\u6ca1\u6709\u56fa\u5b9a\u7684\u62bd\u53d6\u89c4\u5219\u3002 \u5bf9\u4e8e\u6240\u6709\u7f51\u9875\u90fd\u662f\u4e00\u5957\u901a\u7528\u7684\u5904\u7406\u65b9\u6cd5\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u770b\u6211\u4e4b\u524d\u5206\u4eab\u7684\u4ee3\u7801 \u7528Golang\u5199\u722c\u866b\uff08\u4e00\uff09 \u5782\u76f4\u722c\u866b\u3002\u8fd9\u7c7b\u722c\u866b\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u5bf9\u8c61\u3001\u7f51\u7ad9\uff0c\u6709\u4e00\u53f0\u6307\u5b9a\u7684\u722c\u53d6\u8def\u5f84\u3001\u6570\u636e\u62bd\u53d6\u89c4\u5219\u3002\u5bf9\u4e8e\u6211\u4eec\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u5199\u7684\u722c\u866b\u90fd\u662f\u5782\u76f4\u722c\u866b\uff0c\u5177\u4f53\u7684\u67d0\u4e2a\u7f51\u7ad9\u7684\u67d0\u4e2a\u6570\u636e\uff0c\u6bd4\u5982\u6dd8\u5b9d\u7684\u624b\u673a\u3001\u5f53\u5f53\u4e0a\u7684\u4e66\u7c4d\u7b49\u7b49\u3002","title":"\u5206\u7c7b"},{"location":"introduce_spider/introduce_spider/#_5","text":"\u7f51\u7edc\u722c\u866b\u59cb\u4e8e\u4e00\u5f20\u88ab\u79f0\u4f5c\u79cd\u5b50\u7684\u7edf\u4e00\u8d44\u6e90\u5730\u5740\uff08URL\uff09\u5217\u8868\u3002\u5f53\u7f51\u7edc\u722c\u866b\u8bbf\u95ee\u8fd9\u4e9bURL\u65f6\uff0c\u5b83\u4eec\u4f1a\u7504\u522b\u51fa\u9875\u9762\u4e0a\u6240\u6709\u7684\u8d85\u94fe\u63a5\uff0c\u5e76\u5c06\u5b83\u4eec\u5199\u5165\u4e00\u5f20\u201c\u5f85\u8bbf\u5217\u8868\u201d\uff0c\u5373\u5c06\u8981\u8bbf\u95ee\u7684\u94fe\u63a5\u3002\u7136\u540e\u518d\u6b21\u8bbf\u95ee\u8fd9\u4e9bURL\uff0c\u63d0\u53d6\uff0c\u5faa\u73af\u5f80\u590d\u3002 \u5e38\u89c1\u7684\u722c\u866b\u722c\u53d6\u7b56\u7565\u6709DFS\u548cBFS\uff0c\u62ff\u4e00\u5f20\u56fe\u6765\u8bf4\u660e \u6df1\u5ea6\u4f18\u5148\u7b56\u7565(DFS) \u6df1\u5ea6\u4f18\u5148\u7b56\u7565\u662f\u6307\u722c\u866b\u4ece\u67d0\u4e2aURL\u5f00\u59cb\uff0c\u4e00\u4e2a\u94fe\u63a5\u4e00\u4e2a\u94fe\u63a5\u7684\u722c\u53d6\u4e0b\u53bb\uff0c\u76f4\u5230\u5904\u7406\u5b8c\u4e86\u67d0\u4e2a\u94fe\u63a5\u6240\u5728\u7684\u6240\u6709\u7ebf\u8def\uff0c\u624d\u5207\u6362\u5230\u5176\u5b83\u7684\u7ebf\u8def\u3002 \u6b64\u65f6\u6293\u53d6\u987a\u5e8f\u4e3a\uff1aA -> B -> C -> D -> E -> F -> G -> H -> I -> J \u5e7f\u5ea6\u4f18\u5148\u7b56\u7565(BFS) \u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u7b56\u7565\u7684\u57fa\u672c\u601d\u8def\u662f\uff0c\u5c06\u65b0\u4e0b\u8f7d\u7f51\u9875\u4e2d\u53d1\u73b0\u7684\u94fe\u63a5\u76f4\u63a5\u63d2\u5165\u5f85\u6293\u53d6URL\u961f\u5217\u7684\u672b\u5c3e\u3002\u4e5f\u5c31\u662f\u6307\u7f51\u7edc\u722c\u866b\u4f1a\u5148\u6293\u53d6\u8d77\u59cb\u7f51\u9875\u4e2d\u94fe\u63a5\u7684\u6240\u6709\u7f51\u9875\uff0c\u7136\u540e\u518d\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u94fe\u63a5\u7f51\u9875\uff0c\u7ee7\u7eed\u6293\u53d6\u5728\u6b64\u7f51\u9875\u4e2d\u94fe\u63a5\u7684\u6240\u6709\u7f51\u9875\u3002 \u6b64\u65f6\u6293\u53d6\u987a\u5e8f\u4e3a\uff1aA -> B -> E -> G -> H -> I -> C -> F -> J -> D \u548c\u7b97\u6cd5\u4e2d\u7684\u4fdd\u6301\u4e00\u81f4","title":"\u7b56\u7565"},{"location":"introduce_spider/introduce_spider/#_6","text":"\u5728\u77e5\u4e4e\u4e0a\u4e00\u76f4\u90fd\u6709\u5404\u79cd\u5404\u6837\u7684\u5165\u95e8\u6587\u7ae0\uff0c\u9c7c\u9f99\u6df7\u6742\u5427\u3002\u5177\u4f53\u7684\u5b66\u4e60\u53ef\u4ee5\u770b\u770b\u5d14\u5e86\u624d\u7684\u4e66\uff0c\u5199\u7684\u633a\u597d\u7684\u3002\u518d\u6709\u628a\u8fd9\u4e2a\u6559\u7a0b\u91cc \u5165\u95e8 \u7ae0\u8282\u770b\u5b8c\uff0c\u7f16\u5199\u4e00\u822c\u7684\u722c\u866b\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u60f3\u8981\u53bb\u7ee7\u7eed\u6df1\u5165\uff0c\u53ef\u4ee5\u53bb\u770b\u770b \u653e\u5f03 \u7ae0\u8282\u3002 \u5176\u5b9e\u8fd9\u4e9b\u65b9\u5411\u90fd\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u6700\u4e3b\u8981\u8fd8\u662f\u770b\u81ea\u5df1\u82b1\u591a\u5c11\u65f6\u95f4\u53bb\u5b66\u4e60\u3002\u6211\u4e0b\u73ed\u540e\u56de\u5230\u5bb6\uff0c\u6bcf\u5929\u90fd\u4f1a\u5199\u4ee3\u7801\u6216\u8005\u5b66\u65b0\u6280\u672f\uff0c\u4e00\u822c\u523012\u70b9\u3002","title":"\u5982\u4f55\u5b66\u4e60\u6570\u636e\u91c7\u96c6"},{"location":"introduce_spider/introduce_spider/#_7","text":"\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u6570\u636e\u5427\u3002 \u8fd9\u662f\u4ece\u67d0\u7f51\u7ad9\u4e0a\u6293\u53d6\u7684\uff08\u5168\u56fd\u6240\u6709\u804c\u4f4d\uff09\uff0c\u4ece2018\u5e746\u6708\u52302018\u5e7412\u6708\uff0c\u5173\u952e\u8bcd\u662f\u201d\u722c\u866b\u201c\u3001\u201d\u6570\u636e\u91c7\u96c6\u201c\u7684\u804c\u4f4d\u6570\u91cf\uff0c\u591a\u7684\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u804c\u4f4d\u660e\u663e\u662f\u5728\u51cf\u5c11\u3002\u6211\u4eec\u518d\u6765\u770b\u770b\u641c\u7d22\u201d\u524d\u7aef\u201c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u3002 \u6ce8\u610f\u770b\u7eb5\u5750\u6807\u7684\u6570\u91cf\uff0c\u6839\u672c\u5c31\u4e0d\u5728\u4e00\u4e2a\u7ea7\u522b\u3002\u4f46\u662f\u6ce8\u610f\u770b\u6574\u4f53\u8d8b\u52bf\uff0c\u90fd\u662f\u5728\u4e0b\u964d\uff0c\u4f30\u8ba1\u548c\u73b0\u5728\u7684\u4e92\u8054\u7f51\u5bd2\u51ac\u6709\u5173\u3002 \u6570\u636e\u91c7\u96c6\u804c\u4f4d\u6570\u91cf\u4e0a\u6765\u770b\u8981\u6bd4\u524d\u7aef\u65b9\u5411\u5c11\u5f88\u591a\uff0c\u56e0\u4e3a\u6bcf\u5bb6\u516c\u53f8\u90fd\u4f1a\u9700\u8981\u524d\u7aef\u3001\u4f46\u5e76\u975e\u4e00\u5b9a\u8981\u6570\u636e\u91c7\u96c6\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bf4\u540e\u7aef\uff0c\u4e3b\u8981\u662f\u540e\u7aef\u5305\u542b\u592a\u5e7f\uff0cPython\u3001JAVA\u3001GO\u3001PHP\u7b49\u7b49\u90fd\u53ef\u4ee5\u505a\uff0c\u6240\u4ee5\u7edf\u8ba1\u6570\u91cf\u53ef\u80fd\u4e0d\u597d\u7b97\u3002 \u5982\u679c\u4f60\u771f\u7684\u559c\u6b22\u6570\u636e\u91c7\u96c6\uff0c\u90a3\u4e48\u5c31\u52aa\u529b\u63d0\u5347\u81ea\u5df1\u7684\u6280\u80fd\uff0c\u8fd9\u624d\u662f\u6700\u91cd\u8981\u7684\u3002 \u5173\u4e8e\u722c\u866b\u5b66\u5230\u4ec0\u4e48\u7a0b\u5ea6\u53ef\u4ee5\u627e\u5de5\u4f5c\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u4e4b\u524d\u5199\u7684\uff0c \u722c\u866b\u5b66\u5230\u4ec0\u4e48\u7a0b\u5ea6\u53ef\u4ee5\u53bb\u627e\u5de5\u4f5c \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u6570\u636e\u91c7\u96c6\u524d\u666f\u8ba8\u8bba"},{"location":"introduce_spider/spider_interview/","text":"\u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898","title":"\u722c\u866b\u9762\u8bd5"},{"location":"introduce_spider/spider_interview/#_1","text":"","title":"\u722c\u866b\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898"},{"location":"network/HTTP/","text":"HTTP\u534f\u8bae HTTP\u7684\u7279\u6027 HTTP\u6784\u5efa\u4e8eTCP/IP\u534f\u8bae\u4e4b\u4e0a\uff0c\u9ed8\u8ba4\u7aef\u53e3\u53f7\u662f80 HTTP\u662f \u65e0\u8fde\u63a5\u65e0\u72b6\u6001 \u7684 HTTP\u62a5\u6587 \u8bf7\u6c42\u62a5\u6587 HTTP \u534f\u8bae\u662f\u4ee5 ASCII \u7801\u4f20\u8f93\uff0c\u5efa\u7acb\u5728 TCP/IP \u534f\u8bae\u4e4b\u4e0a\u7684\u5e94\u7528\u5c42\u89c4\u8303\u3002\u89c4\u8303\u628a HTTP \u8bf7\u6c42\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u72b6\u6001\u884c\u3001\u8bf7\u6c42\u5934\u3001\u6d88\u606f\u4e3b\u4f53\u3002\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a <method> <request-URL> <version> <headers> <entity-body> HTTP\u5b9a\u4e49\u4e86\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u4e0d\u540c\u65b9\u6cd5\uff0c\u6700\u57fa\u672c\u7684\u65b9\u6cd5\u67094\u79cd\uff0c\u5206\u522b\u662f GET \uff0c POST \uff0c PUT \uff0c DELETE \u3002 URL \u5168\u79f0\u662f\u8d44\u6e90\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba4\u4e3a\uff1a\u4e00\u4e2a URL \u5730\u5740\uff0c\u5b83\u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u7f51\u7edc\u4e0a\u7684\u8d44\u6e90\uff0c\u800c HTTP \u4e2d\u7684 GET \uff0c POST \uff0c PUT \uff0c DELETE \u5c31\u5bf9\u5e94\u7740\u5bf9\u8fd9\u4e2a\u8d44\u6e90\u7684\u67e5\uff0c\u589e\uff0c\u6539\uff0c\u52204\u4e2a\u64cd\u4f5c\uff08CRUD\uff09\u3002 GET\u7528\u4e8e\u4fe1\u606f\u83b7\u53d6\uff0cGET\u8bf7\u6c42\u62a5\u6587\u793a\u4f8b\uff1a GET /books/?sex=man&name=Professional HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Connection: Keep-Alive POST\u8868\u793a\u53ef\u80fd\u4fee\u6539\u53d8\u670d\u52a1\u5668\u4e0a\u7684\u8d44\u6e90\u7684\u8bf7\u6c42\u3002 POST / HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Content-Type: application/x-www-form-urlencoded Content-Length: 40 Connection: Keep-Alive sex=man&name=Professional \u4e3e\u4f8b\uff0cChrome\u968f\u4fbf\u6253\u5f00\u4e00\u4e2a\u7f51\u9875\uff0c\u5c31\u4f1a\u770b\u5230HTTP\u62a5\u6587\uff0c\u6211\u4eec\u770b\u5230\u7684\u88ab\u6d4f\u89c8\u5668\u7b80\u5316\u7684\u53ca\u5916\u56fd\uff0c\u6211\u4eec\u70b9\u51fb view source \u5373\u53ef\u67e5\u770b\u539f\u59cb\u62a5\u6587\uff1a \u54cd\u5e94\u62a5\u6587 HTTP \u54cd\u5e94\u4e0e HTTP \u8bf7\u6c42\u76f8\u4f3c\uff0cHTTP\u54cd\u5e94\u4e5f\u75313\u4e2a\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u662f\uff1a \u72b6\u6001\u884c \u54cd\u5e94\u5934(Response Header) \u54cd\u5e94\u6b63\u6587 \u72b6\u6001\u884c\u7531\u534f\u8bae\u7248\u672c\u3001\u6570\u5b57\u5f62\u5f0f\u7684\u72b6\u6001\u4ee3\u7801\u3001\u53ca\u76f8\u5e94\u7684\u72b6\u6001\u63cf\u8ff0\uff0c\u5404\u5143\u7d20\u4e4b\u95f4\u4ee5\u7a7a\u683c\u5206\u9694\u3002 \u5e38\u89c1\u7684\u72b6\u6001\u7801\u6709\u5982\u4e0b\u51e0\u79cd\uff1a 200 OK \u5ba2\u6237\u7aef\u8bf7\u6c42\u6210\u529f 301 Moved Permanently \u8bf7\u6c42\u6c38\u4e45\u91cd\u5b9a\u5411 302 Moved Temporarily \u8bf7\u6c42\u4e34\u65f6\u91cd\u5b9a\u5411 304 Not Modified \u6587\u4ef6\u672a\u4fee\u6539\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7f13\u5b58\u7684\u6587\u4ef6\u3002 400 Bad Request \u7531\u4e8e\u5ba2\u6237\u7aef\u8bf7\u6c42\u6709\u8bed\u6cd5\u9519\u8bef\uff0c\u4e0d\u80fd\u88ab\u670d\u52a1\u5668\u6240\u7406\u89e3\u3002 401 Unauthorized \u8bf7\u6c42\u672a\u7ecf\u6388\u6743\u3002\u8fd9\u4e2a\u72b6\u6001\u4ee3\u7801\u5fc5\u987b\u548cWWW-Authenticate\u62a5\u5934\u57df\u4e00\u8d77\u4f7f\u7528 403 Forbidden \u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\uff0c\u4f46\u662f\u62d2\u7edd\u63d0\u4f9b\u670d\u52a1\u3002\u670d\u52a1\u5668\u901a\u5e38\u4f1a\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u7ed9\u51fa\u4e0d\u63d0\u4f9b\u670d\u52a1\u7684\u539f\u56e0 404 Not Found \u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u4f8b\u5982\uff0c\u8f93\u5165\u4e86\u9519\u8bef\u7684URL 500 Internal Server Error \u670d\u52a1\u5668\u53d1\u751f\u4e0d\u53ef\u9884\u671f\u7684\u9519\u8bef\uff0c\u5bfc\u81f4\u65e0\u6cd5\u5b8c\u6210\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 503 Service Unavailable \u670d\u52a1\u5668\u5f53\u524d\u4e0d\u80fd\u591f\u5904\u7406\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u6062\u590d\u6b63\u5e38\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aHTTP\u54cd\u5e94\u7684\u4f8b\u5b50\uff1a HTTP/1.1 200 OK Server:Apache Tomcat/5.0.12 Date:Mon,6Oct2003 13:23:42 GMT Content-Length:112 <html>... \u540c\u6837\u7684\u53ef\u4ee5\u5728Chrome\u4e2d\u67e5\u770b\u539f\u59cb\u62a5\u6587\u548c\u7b80\u5316\u8fc7\u7684\u3002 \u4f1a\u8bdd\u8ddf\u8e2a \u4ec0\u4e48\u662f\u4f1a\u8bdd\uff1f\u5ba2\u6237\u7aef\u6253\u5f00\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u53d1\u51fa\u8bf7\u6c42\u5230\u670d\u52a1\u5668\u54cd\u5e94\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5168\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u4f1a\u8bdd\u3002 \u4ec0\u4e48\u662f\u4f1a\u8bdd\u8ddf\u8e2a\uff1f\u3002\u4f1a\u8bdd\u8ddf\u8e2a\u6307\u7684\u662f\u5bf9\u540c\u4e00\u4e2a\u7528\u6237\u5bf9\u670d\u52a1\u5668\u7684\u8fde\u7eed\u7684\u8bf7\u6c42\u548c\u63a5\u53d7\u54cd\u5e94\u7684\u76d1\u89c6\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4f1a\u8bdd\u8ddf\u8e2a\uff1f\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u901a\u8fc7HTTP\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u7684\uff0c\u800cHTTP\u534f\u8bae\u662f\u201d\u65e0\u72b6\u6001\u201d\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u80fd\u4fdd\u5b58\u5ba2\u6237\u7684\u4fe1\u606f\uff0c\u5373\u4e00\u6b21\u54cd\u5e94\u5b8c\u6210\u4e4b\u540e\u8fde\u63a5\u5c31\u65ad\u5f00\u4e86\uff0c\u4e0b\u4e00\u6b21\u7684\u8bf7\u6c42\u9700\u8981\u91cd\u65b0\u8fde\u63a5\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u540c\u4e00\u4e2a\u7528\u6237\uff0c\u6240\u4ee5\u624d\u6709\u4f1a\u8bdd\u8ddf\u8e2a\u6280\u672f\u6765\u5b9e\u73b0\u8fd9\u79cd\u8981\u6c42\u3002 \u4f1a\u8bdd\u8ddf\u8e2a\u5e38\u7528\u7684\u65b9\u6cd5: URL\u91cd\u5199 \u3002URL(\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26)\u662fWeb\u4e0a\u7279\u5b9a\u9875\u9762\u7684\u5730\u5740\uff0cURL\u91cd\u5199\u7684\u6280\u672f\u5c31\u662f\u5728URL\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u9644\u52a0\u6570\u636e\u4ee5\u6807\u8bc6\u8be5\u4f1a\u8bdd,\u628a\u4f1a\u8bddID\u901a\u8fc7URL\u7684\u4fe1\u606f\u4f20\u9012\u8fc7\u53bb\uff0c\u4ee5\u4fbf\u5728\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u8bc6\u522b\u4e0d\u540c\u7684\u7528\u6237\u3002 \u9690\u85cf\u8868\u5355\u57df \u3002\u5c06\u4f1a\u8bddID\u6dfb\u52a0\u5230HTML\u8868\u5355\u5143\u7d20\u4e2d\u63d0\u4ea4\u5230\u670d\u52a1\u5668\uff0c\u6b64\u8868\u5355\u5143\u7d20\u5e76\u4e0d\u5728\u5ba2\u6237\u7aef\u663e\u793a Cookie \u3002Cookie\u662fWeb\u670d\u52a1\u5668\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u4e00\u5c0f\u6bb5\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\u65f6\u53ef\u4ee5\u8bfb\u53d6\u8be5\u4fe1\u606f\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\uff0c\u8fdb\u800c\u8fdb\u884c\u7528\u6237\u7684\u8bc6\u522b\u3002\u5bf9\u4e8e\u5ba2\u6237\u7aef\u7684\u6bcf\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u90fd\u4f1a\u5c06Cookie\u53d1\u9001\u5230\u5ba2\u6237\u7aef,\u5728\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdb\u884c\u4fdd\u5b58,\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u91c7\u7528\u4e24\u79cd\u65b9\u5f0f\u6765\u4fdd\u5b58\u8fd9\u4e2aCookie\u5bf9\u8c61\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u5185\u5b58\u4e2d\uff0c\u79f0\u4e3a\u4e34\u65f6Cookie\uff0c\u6d4f\u89c8\u5668\u5173\u95ed\u540e\u8fd9\u4e2aCookie\u5bf9\u8c61\u5c06\u6d88\u5931\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u673a\u7684\u78c1\u76d8\u4e0a\uff0c\u79f0\u4e3a\u6c38\u4e45Cookie\u3002\u4ee5\u540e\u5ba2\u6237\u7aef\u53ea\u8981\u8bbf\u95ee\u8be5\u7f51\u7ad9\uff0c\u5c31\u4f1a\u5c06\u8fd9\u4e2aCookie\u518d\u6b21\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u524d\u63d0\u662f\u8fd9\u4e2aCookie\u5728\u6709\u6548\u671f\u5185\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5bf9\u5ba2\u6237\u7684\u8ddf\u8e2a\u3002Cookie\u662f\u53ef\u4ee5\u88ab\u7981\u6b62\u7684\u3002 Session \u3002\u6bcf\u4e00\u4e2a\u7528\u6237\u90fd\u6709\u4e00\u4e2a\u4e0d\u540c\u7684session\uff0c\u5404\u4e2a\u7528\u6237\u4e4b\u95f4\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff0c\u662f\u6bcf\u4e2a\u7528\u6237\u6240\u72ec\u4eab\u7684\uff0c\u5728session\u4e2d\u53ef\u4ee5\u5b58\u653e\u4fe1\u606f\u3002\u5728\u670d\u52a1\u5668\u7aef\u4f1a\u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff0c\u4ea7\u751f\u4e00\u4e2asessionID\u6765\u6807\u8bc6\u8fd9\u4e2asession\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8fd9\u4e2asessionID\u653e\u5165\u5230Cookie\u4e2d\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u4e0b\u4e00\u6b21\u8bbf\u95ee\u65f6\uff0csessionID\u4f1a\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5728\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u8bc6\u522b\u4e0d\u540c\u7684\u7528\u6237\u3002Session\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8eCookie\uff0c\u5982\u679cCookie\u88ab\u7981\u7528\uff0c\u90a3\u4e48session\u4e5f\u5c06\u5931\u6548\u3002\uff08\u5982\u679c\u4f60\u719f\u6089requests\uff0c\u90a3\u4e48\u4f60\u80af\u5b9a\u7528\u5230requests.session\uff0c\u548c\u8fd9\u91cc\u8bb2\u5230\u7684Session\u4e00\u81f4\uff0c\u5e38\u5e38\u7528\u4e8e\u9700\u8981\u767b\u5f55\u624d\u80fd\u91c7\u96c6\u7684\u7f51\u7ad9\uff09 \u8de8\u7ad9\u653b\u51fb CSRF\uff08Cross-site request forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff09 CSRF(XSRF) \u987e\u540d\u601d\u4e49\uff0c\u662f\u4f2a\u9020\u8bf7\u6c42\uff0c\u5192\u5145\u7528\u6237\u5728\u7ad9\u5185\u7684\u6b63\u5e38\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u4e00\u8bba\u575b\u7f51\u7ad9\u7684\u53d1\u8d34\u662f\u901a\u8fc7 GET \u8bf7\u6c42\u8bbf\u95ee\uff0c\u70b9\u51fb\u53d1\u8d34\u4e4b\u540e JS \u628a\u53d1\u8d34\u5185\u5bb9\u62fc\u63a5\u6210\u76ee\u6807 URL \u5e76\u8bbf\u95ee\uff1a http://example.com/bbs/create_post.php?title=\u6807\u9898&content=\u5185\u5bb9 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8bba\u575b\u4e2d\u53d1\u4e00\u5e16\uff0c\u5305\u542b\u4e00\u94fe\u63a5\uff1a http://example.com/bbs/create_post.php?title=\u6211\u662f\u8111\u6b8b&content=\u54c8\u54c8 \u53ea\u8981\u6709\u7528\u6237\u70b9\u51fb\u4e86\u8fd9\u4e2a\u94fe\u63a5\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u5e10\u6237\u5c31\u4f1a\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u53d1\u5e03\u4e86\u8fd9\u4e00\u5e16\u5b50\u3002\u53ef\u80fd\u8fd9\u53ea\u662f\u4e2a\u6076\u4f5c\u5267\uff0c\u4f46\u662f\u65e2\u7136\u53d1\u8d34\u7684\u8bf7\u6c42\u53ef\u4ee5\u4f2a\u9020\uff0c\u90a3\u4e48\u5220\u5e16\u3001\u8f6c\u5e10\u3001\u6539\u5bc6\u7801\u3001\u53d1\u90ae\u4ef6\u5168\u90fd\u53ef\u4ee5\u4f2a\u9020\u3002 \u5982\u4f55\u9632\u8303 CSRF \u653b\u51fb \uff1f\u53ef\u4ee5\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5173\u952e\u64cd\u4f5c\u53ea\u63a5\u53d7POST\u8bf7\u6c42 \u9a8c\u8bc1\u7801\u3002CSRF\u653b\u51fb\u7684\u8fc7\u7a0b\uff0c\u5f80\u5f80\u662f\u5728\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6784\u9020\u7f51\u7edc\u8bf7\u6c42\u3002\u6240\u4ee5\u5982\u679c\u4f7f\u7528\u9a8c\u8bc1\u7801\uff0c\u90a3\u4e48\u6bcf\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u7528\u6237\u8fdb\u884c\u4e92\u52a8\uff0c\u4ece\u800c\u7b80\u5355\u6709\u6548\u7684\u9632\u5fa1\u4e86CSRF\u653b\u51fb\u3002\u4f46\u662f\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u7f51\u7ad9\u4f5c\u51fa\u4efb\u4f55\u4e3e\u52a8\u90fd\u8981\u8f93\u5165\u9a8c\u8bc1\u7801\u4f1a\u4e25\u91cd\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\uff0c\u6240\u4ee5\u9a8c\u8bc1\u7801\u4e00\u822c\u53ea\u51fa\u73b0\u5728\u7279\u6b8a\u64cd\u4f5c\u91cc\u9762\uff0c\u6216\u8005\u5728\u6ce8\u518c\u65f6\u5019\u4f7f\u7528\u3002 \u68c0\u6d4b Referer\u3002\u5e38\u89c1\u7684\u4e92\u8054\u7f51\u9875\u9762\u4e0e\u9875\u9762\u4e4b\u95f4\u662f\u5b58\u5728\u8054\u7cfb\u7684\uff0c\u6bd4\u5982\u4f60\u5728 www.baidu.com \u5e94\u8be5\u662f\u627e\u4e0d\u5230\u901a\u5f80 www.google.com \u7684\u94fe\u63a5\u7684\uff0c\u518d\u6bd4\u5982\u4f60\u5728\u8bba\u575b\u7559\u8a00\uff0c\u90a3\u4e48\u4e0d\u7ba1\u4f60\u7559\u8a00\u540e\u91cd\u5b9a\u5411\u5230\u54ea\u91cc\u53bb\u4e86\uff0c\u4e4b\u524d\u7684\u90a3\u4e2a\u7f51\u5740\u4e00\u5b9a\u4f1a\u5305\u542b\u7559\u8a00\u7684\u8f93\u5165\u6846\uff0c\u8fd9\u4e2a\u4e4b\u524d\u7684\u7f51\u5740\u5c31\u4f1a\u4fdd\u7559\u5728\u65b0\u9875\u9762\u5934\u6587\u4ef6\u7684 Referer \u4e2d\u3002\u901a\u8fc7\u68c0\u67e5 Referer \u7684\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5408\u6cd5\u7684\u8fd8\u662f\u975e\u6cd5\u7684\uff0c\u4f46\u662f\u95ee\u9898\u51fa\u5728\u670d\u52a1\u5668\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u80fd\u63a5\u53d7\u5230 Referer \u7684\u503c\uff0c\u6240\u4ee5 Referer Check \u4e00\u822c\u7528\u4e8e\u76d1\u63a7 CSRF \u653b\u51fb\u7684\u53d1\u751f\uff0c\u800c\u4e0d\u7528\u6765\u62b5\u5fa1\u653b\u51fb\u3002 Token\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u505a\u6cd5\u662f\u4f7f\u7528 Token \u62b5\u5fa1 CSRF \u653b\u51fb\u3002Token \u4f7f\u7528\u539f\u5219\uff1aToken \u8981\u8db3\u591f\u968f\u673a\u2014\u2014\u2014\u2014\u53ea\u6709\u8fd9\u6837\u624d\u7b97\u4e0d\u53ef\u9884\u6d4b\uff1bToken \u662f\u4e00\u6b21\u6027\u7684\uff0c\u5373\u6bcf\u6b21\u8bf7\u6c42\u6210\u529f\u540e\u8981\u66f4\u65b0Token\u2014\u2014\u2014\u2014\u8fd9\u6837\u53ef\u4ee5\u589e\u52a0\u653b\u51fb\u96be\u5ea6\uff0c\u589e\u52a0\u9884\u6d4b\u96be\u5ea6\uff1bToken \u8981\u6ce8\u610f\u4fdd\u5bc6\u6027\u2014\u2014\u2014\u2014\u654f\u611f\u64cd\u4f5c\u4f7f\u7528 post\uff0c\u9632\u6b62 Token \u51fa\u73b0\u5728 URL \u4e2d\u3002 \u6ce8\u610f \uff1a\u8fc7\u6ee4\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9 \u4e0d\u80fd \u963b\u6321 csrf\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u8fc7\u6ee4\u8bf7\u6c42\u7684 \u6765\u6e90 \u3002 XSS\uff08Cross Site Scripting\uff0c\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff09XSS \u5168\u79f0\u201c\u8de8\u7ad9\u811a\u672c\u201d\uff0c\u662f\u6ce8\u5165\u653b\u51fb\u7684\u4e00\u79cd\u3002\u5176\u7279\u70b9\u662f\u4e0d\u5bf9\u670d\u52a1\u5668\u7aef\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u4e9b\u6b63\u5e38\u7684\u7ad9\u5185\u4ea4\u4e92\u9014\u5f84\uff0c\u4f8b\u5982\u53d1\u5e03\u8bc4\u8bba\uff0c\u63d0\u4ea4\u542b\u6709 JavaScript \u7684\u5185\u5bb9\u6587\u672c\u3002\u8fd9\u65f6\u670d\u52a1\u5668\u7aef\u5982\u679c\u6ca1\u6709\u8fc7\u6ee4\u6216\u8f6c\u4e49\u6389\u8fd9\u4e9b\u811a\u672c\uff0c\u4f5c\u4e3a\u5185\u5bb9\u53d1\u5e03\u5230\u4e86\u9875\u9762\u4e0a\uff0c\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u7684\u65f6\u5019\u5c31\u4f1a\u8fd0\u884c\u8fd9\u4e9b\u811a\u672c\u3002\u8fd0\u884c\u9884\u671f\u4e4b\u5916\u7684\u811a\u672c\u5e26\u6765\u7684\u540e\u679c\u6709\u5f88\u591a\u4e2d\uff0c\u53ef\u80fd\u53ea\u662f\u7b80\u5355\u7684\u6076\u4f5c\u5267\u2014\u2014\u4e00\u4e2a\u5173\u4e0d\u6389\u7684\u7a97\u53e3\uff1a while (true) { alert(\"\u4f60\u5173\u4e0d\u6389\u6211~\"); } \u770b\u5230\u4e0a\u9762\u8bf4\u7684\u8fd9\u4e9b\uff0c\u4f60\u662f\u4e0d\u662f\u975e\u5e38\u719f\u6089\uff0c\u8fd9\u548c\u6211\u4eec\u6bcf\u5929\u505a\u7684\u53cd\u722c\u866b\u5f88\u76f8\u4f3c\u561b\u3002\u9a8c\u8bc1\u7801\u3001Referer\u3001Token\uff0c\u6bcf\u4e00\u70b9\u90fd\u9700\u8981\u6ce8\u610f\uff0c\u66f4\u7ec6\u7684\u6211\u4eec\u4ee5\u540e\u518d\u8bf4\u3002 \u5b9e\u8df5 \u6253\u5f00 \u77e5\u4e4e\u9996\u9875 \uff0c\u4e0b\u62c9\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u53eb session_token \u7684\u53c2\u6570\uff0c\u53bb\u63a2\u7d22\uff0c\u8fd9\u4e2atoken\u5e26\u8fb9\u4ec0\u4e48\u610f\u601d\uff0c\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u722c\u866b\u4f1a\u9700\u8981\u5b83\u5417\uff1f \u53c2\u8003\u8d44\u6599 \u6d45\u8c08HTTP\u4e2dGet\u4e0ePost\u7684\u533a\u522b http\u8bf7\u6c42\u4e0ehttp\u54cd\u5e94\u8be6\u7ec6\u89e3\u6790 HTTP \u6761\u4ef6 Get (Conditional Get) HTTP\u4e2d\u7684\u957f\u8fde\u63a5\u4e0e\u77ed\u8fde\u63a5 HTTP Keep-Alive\u6a21\u5f0f \u5206\u5757\u4f20\u8f93\u7f16\u7801 HTTP \u7ba1\u7ebf\u5316(HTTP pipelining) HTTP\u534f\u8bae\u53ca\u5176POST\u4e0eGET\u64cd\u4f5c\u5dee\u5f02 & C#\u4e2d\u5982\u4f55\u4f7f\u7528POST\u3001GET\u7b49 \u56db\u79cd\u5e38\u89c1\u7684 POST \u63d0\u4ea4\u6570\u636e\u65b9\u5f0f \u4f1a\u8bdd\u8ddf\u8e2a \u603b\u7ed3 XSS \u4e0e CSRF \u4e24\u79cd\u8de8\u7ad9\u653b\u51fb CSRF\u7b80\u5355\u4ecb\u7ecd\u4e0e\u5229\u7528\u65b9\u6cd5 XSS\u653b\u51fb\u53ca\u9632\u5fa1 \u767e\u5ea6\u767e\u79d1\uff1aHTTP HTTP\u7684\u7279\u6027 \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"HTTP\u534f\u8bae"},{"location":"network/HTTP/#http","text":"","title":"HTTP\u534f\u8bae"},{"location":"network/HTTP/#http_1","text":"HTTP\u6784\u5efa\u4e8eTCP/IP\u534f\u8bae\u4e4b\u4e0a\uff0c\u9ed8\u8ba4\u7aef\u53e3\u53f7\u662f80 HTTP\u662f \u65e0\u8fde\u63a5\u65e0\u72b6\u6001 \u7684","title":"HTTP\u7684\u7279\u6027"},{"location":"network/HTTP/#http_2","text":"","title":"HTTP\u62a5\u6587"},{"location":"network/HTTP/#_1","text":"HTTP \u534f\u8bae\u662f\u4ee5 ASCII \u7801\u4f20\u8f93\uff0c\u5efa\u7acb\u5728 TCP/IP \u534f\u8bae\u4e4b\u4e0a\u7684\u5e94\u7528\u5c42\u89c4\u8303\u3002\u89c4\u8303\u628a HTTP \u8bf7\u6c42\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u72b6\u6001\u884c\u3001\u8bf7\u6c42\u5934\u3001\u6d88\u606f\u4e3b\u4f53\u3002\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a <method> <request-URL> <version> <headers> <entity-body> HTTP\u5b9a\u4e49\u4e86\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u4e0d\u540c\u65b9\u6cd5\uff0c\u6700\u57fa\u672c\u7684\u65b9\u6cd5\u67094\u79cd\uff0c\u5206\u522b\u662f GET \uff0c POST \uff0c PUT \uff0c DELETE \u3002 URL \u5168\u79f0\u662f\u8d44\u6e90\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba4\u4e3a\uff1a\u4e00\u4e2a URL \u5730\u5740\uff0c\u5b83\u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u7f51\u7edc\u4e0a\u7684\u8d44\u6e90\uff0c\u800c HTTP \u4e2d\u7684 GET \uff0c POST \uff0c PUT \uff0c DELETE \u5c31\u5bf9\u5e94\u7740\u5bf9\u8fd9\u4e2a\u8d44\u6e90\u7684\u67e5\uff0c\u589e\uff0c\u6539\uff0c\u52204\u4e2a\u64cd\u4f5c\uff08CRUD\uff09\u3002 GET\u7528\u4e8e\u4fe1\u606f\u83b7\u53d6\uff0cGET\u8bf7\u6c42\u62a5\u6587\u793a\u4f8b\uff1a GET /books/?sex=man&name=Professional HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Connection: Keep-Alive POST\u8868\u793a\u53ef\u80fd\u4fee\u6539\u53d8\u670d\u52a1\u5668\u4e0a\u7684\u8d44\u6e90\u7684\u8bf7\u6c42\u3002 POST / HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Content-Type: application/x-www-form-urlencoded Content-Length: 40 Connection: Keep-Alive sex=man&name=Professional \u4e3e\u4f8b\uff0cChrome\u968f\u4fbf\u6253\u5f00\u4e00\u4e2a\u7f51\u9875\uff0c\u5c31\u4f1a\u770b\u5230HTTP\u62a5\u6587\uff0c\u6211\u4eec\u770b\u5230\u7684\u88ab\u6d4f\u89c8\u5668\u7b80\u5316\u7684\u53ca\u5916\u56fd\uff0c\u6211\u4eec\u70b9\u51fb view source \u5373\u53ef\u67e5\u770b\u539f\u59cb\u62a5\u6587\uff1a","title":"\u8bf7\u6c42\u62a5\u6587"},{"location":"network/HTTP/#_2","text":"HTTP \u54cd\u5e94\u4e0e HTTP \u8bf7\u6c42\u76f8\u4f3c\uff0cHTTP\u54cd\u5e94\u4e5f\u75313\u4e2a\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u662f\uff1a \u72b6\u6001\u884c \u54cd\u5e94\u5934(Response Header) \u54cd\u5e94\u6b63\u6587 \u72b6\u6001\u884c\u7531\u534f\u8bae\u7248\u672c\u3001\u6570\u5b57\u5f62\u5f0f\u7684\u72b6\u6001\u4ee3\u7801\u3001\u53ca\u76f8\u5e94\u7684\u72b6\u6001\u63cf\u8ff0\uff0c\u5404\u5143\u7d20\u4e4b\u95f4\u4ee5\u7a7a\u683c\u5206\u9694\u3002 \u5e38\u89c1\u7684\u72b6\u6001\u7801\u6709\u5982\u4e0b\u51e0\u79cd\uff1a 200 OK \u5ba2\u6237\u7aef\u8bf7\u6c42\u6210\u529f 301 Moved Permanently \u8bf7\u6c42\u6c38\u4e45\u91cd\u5b9a\u5411 302 Moved Temporarily \u8bf7\u6c42\u4e34\u65f6\u91cd\u5b9a\u5411 304 Not Modified \u6587\u4ef6\u672a\u4fee\u6539\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7f13\u5b58\u7684\u6587\u4ef6\u3002 400 Bad Request \u7531\u4e8e\u5ba2\u6237\u7aef\u8bf7\u6c42\u6709\u8bed\u6cd5\u9519\u8bef\uff0c\u4e0d\u80fd\u88ab\u670d\u52a1\u5668\u6240\u7406\u89e3\u3002 401 Unauthorized \u8bf7\u6c42\u672a\u7ecf\u6388\u6743\u3002\u8fd9\u4e2a\u72b6\u6001\u4ee3\u7801\u5fc5\u987b\u548cWWW-Authenticate\u62a5\u5934\u57df\u4e00\u8d77\u4f7f\u7528 403 Forbidden \u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\uff0c\u4f46\u662f\u62d2\u7edd\u63d0\u4f9b\u670d\u52a1\u3002\u670d\u52a1\u5668\u901a\u5e38\u4f1a\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u7ed9\u51fa\u4e0d\u63d0\u4f9b\u670d\u52a1\u7684\u539f\u56e0 404 Not Found \u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u4f8b\u5982\uff0c\u8f93\u5165\u4e86\u9519\u8bef\u7684URL 500 Internal Server Error \u670d\u52a1\u5668\u53d1\u751f\u4e0d\u53ef\u9884\u671f\u7684\u9519\u8bef\uff0c\u5bfc\u81f4\u65e0\u6cd5\u5b8c\u6210\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 503 Service Unavailable \u670d\u52a1\u5668\u5f53\u524d\u4e0d\u80fd\u591f\u5904\u7406\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u6062\u590d\u6b63\u5e38\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aHTTP\u54cd\u5e94\u7684\u4f8b\u5b50\uff1a HTTP/1.1 200 OK Server:Apache Tomcat/5.0.12 Date:Mon,6Oct2003 13:23:42 GMT Content-Length:112 <html>... \u540c\u6837\u7684\u53ef\u4ee5\u5728Chrome\u4e2d\u67e5\u770b\u539f\u59cb\u62a5\u6587\u548c\u7b80\u5316\u8fc7\u7684\u3002","title":"\u54cd\u5e94\u62a5\u6587"},{"location":"network/HTTP/#_3","text":"\u4ec0\u4e48\u662f\u4f1a\u8bdd\uff1f\u5ba2\u6237\u7aef\u6253\u5f00\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u53d1\u51fa\u8bf7\u6c42\u5230\u670d\u52a1\u5668\u54cd\u5e94\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5168\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u4f1a\u8bdd\u3002 \u4ec0\u4e48\u662f\u4f1a\u8bdd\u8ddf\u8e2a\uff1f\u3002\u4f1a\u8bdd\u8ddf\u8e2a\u6307\u7684\u662f\u5bf9\u540c\u4e00\u4e2a\u7528\u6237\u5bf9\u670d\u52a1\u5668\u7684\u8fde\u7eed\u7684\u8bf7\u6c42\u548c\u63a5\u53d7\u54cd\u5e94\u7684\u76d1\u89c6\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4f1a\u8bdd\u8ddf\u8e2a\uff1f\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u901a\u8fc7HTTP\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u7684\uff0c\u800cHTTP\u534f\u8bae\u662f\u201d\u65e0\u72b6\u6001\u201d\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u80fd\u4fdd\u5b58\u5ba2\u6237\u7684\u4fe1\u606f\uff0c\u5373\u4e00\u6b21\u54cd\u5e94\u5b8c\u6210\u4e4b\u540e\u8fde\u63a5\u5c31\u65ad\u5f00\u4e86\uff0c\u4e0b\u4e00\u6b21\u7684\u8bf7\u6c42\u9700\u8981\u91cd\u65b0\u8fde\u63a5\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u540c\u4e00\u4e2a\u7528\u6237\uff0c\u6240\u4ee5\u624d\u6709\u4f1a\u8bdd\u8ddf\u8e2a\u6280\u672f\u6765\u5b9e\u73b0\u8fd9\u79cd\u8981\u6c42\u3002 \u4f1a\u8bdd\u8ddf\u8e2a\u5e38\u7528\u7684\u65b9\u6cd5: URL\u91cd\u5199 \u3002URL(\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26)\u662fWeb\u4e0a\u7279\u5b9a\u9875\u9762\u7684\u5730\u5740\uff0cURL\u91cd\u5199\u7684\u6280\u672f\u5c31\u662f\u5728URL\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u9644\u52a0\u6570\u636e\u4ee5\u6807\u8bc6\u8be5\u4f1a\u8bdd,\u628a\u4f1a\u8bddID\u901a\u8fc7URL\u7684\u4fe1\u606f\u4f20\u9012\u8fc7\u53bb\uff0c\u4ee5\u4fbf\u5728\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u8bc6\u522b\u4e0d\u540c\u7684\u7528\u6237\u3002 \u9690\u85cf\u8868\u5355\u57df \u3002\u5c06\u4f1a\u8bddID\u6dfb\u52a0\u5230HTML\u8868\u5355\u5143\u7d20\u4e2d\u63d0\u4ea4\u5230\u670d\u52a1\u5668\uff0c\u6b64\u8868\u5355\u5143\u7d20\u5e76\u4e0d\u5728\u5ba2\u6237\u7aef\u663e\u793a Cookie \u3002Cookie\u662fWeb\u670d\u52a1\u5668\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u4e00\u5c0f\u6bb5\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\u65f6\u53ef\u4ee5\u8bfb\u53d6\u8be5\u4fe1\u606f\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\uff0c\u8fdb\u800c\u8fdb\u884c\u7528\u6237\u7684\u8bc6\u522b\u3002\u5bf9\u4e8e\u5ba2\u6237\u7aef\u7684\u6bcf\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u90fd\u4f1a\u5c06Cookie\u53d1\u9001\u5230\u5ba2\u6237\u7aef,\u5728\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdb\u884c\u4fdd\u5b58,\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u91c7\u7528\u4e24\u79cd\u65b9\u5f0f\u6765\u4fdd\u5b58\u8fd9\u4e2aCookie\u5bf9\u8c61\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u5185\u5b58\u4e2d\uff0c\u79f0\u4e3a\u4e34\u65f6Cookie\uff0c\u6d4f\u89c8\u5668\u5173\u95ed\u540e\u8fd9\u4e2aCookie\u5bf9\u8c61\u5c06\u6d88\u5931\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u673a\u7684\u78c1\u76d8\u4e0a\uff0c\u79f0\u4e3a\u6c38\u4e45Cookie\u3002\u4ee5\u540e\u5ba2\u6237\u7aef\u53ea\u8981\u8bbf\u95ee\u8be5\u7f51\u7ad9\uff0c\u5c31\u4f1a\u5c06\u8fd9\u4e2aCookie\u518d\u6b21\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u524d\u63d0\u662f\u8fd9\u4e2aCookie\u5728\u6709\u6548\u671f\u5185\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5bf9\u5ba2\u6237\u7684\u8ddf\u8e2a\u3002Cookie\u662f\u53ef\u4ee5\u88ab\u7981\u6b62\u7684\u3002 Session \u3002\u6bcf\u4e00\u4e2a\u7528\u6237\u90fd\u6709\u4e00\u4e2a\u4e0d\u540c\u7684session\uff0c\u5404\u4e2a\u7528\u6237\u4e4b\u95f4\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff0c\u662f\u6bcf\u4e2a\u7528\u6237\u6240\u72ec\u4eab\u7684\uff0c\u5728session\u4e2d\u53ef\u4ee5\u5b58\u653e\u4fe1\u606f\u3002\u5728\u670d\u52a1\u5668\u7aef\u4f1a\u521b\u5efa\u4e00\u4e2asession\u5bf9\u8c61\uff0c\u4ea7\u751f\u4e00\u4e2asessionID\u6765\u6807\u8bc6\u8fd9\u4e2asession\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8fd9\u4e2asessionID\u653e\u5165\u5230Cookie\u4e2d\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u4e0b\u4e00\u6b21\u8bbf\u95ee\u65f6\uff0csessionID\u4f1a\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5728\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u8bc6\u522b\u4e0d\u540c\u7684\u7528\u6237\u3002Session\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8eCookie\uff0c\u5982\u679cCookie\u88ab\u7981\u7528\uff0c\u90a3\u4e48session\u4e5f\u5c06\u5931\u6548\u3002\uff08\u5982\u679c\u4f60\u719f\u6089requests\uff0c\u90a3\u4e48\u4f60\u80af\u5b9a\u7528\u5230requests.session\uff0c\u548c\u8fd9\u91cc\u8bb2\u5230\u7684Session\u4e00\u81f4\uff0c\u5e38\u5e38\u7528\u4e8e\u9700\u8981\u767b\u5f55\u624d\u80fd\u91c7\u96c6\u7684\u7f51\u7ad9\uff09","title":"\u4f1a\u8bdd\u8ddf\u8e2a"},{"location":"network/HTTP/#_4","text":"CSRF\uff08Cross-site request forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff09 CSRF(XSRF) \u987e\u540d\u601d\u4e49\uff0c\u662f\u4f2a\u9020\u8bf7\u6c42\uff0c\u5192\u5145\u7528\u6237\u5728\u7ad9\u5185\u7684\u6b63\u5e38\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u4e00\u8bba\u575b\u7f51\u7ad9\u7684\u53d1\u8d34\u662f\u901a\u8fc7 GET \u8bf7\u6c42\u8bbf\u95ee\uff0c\u70b9\u51fb\u53d1\u8d34\u4e4b\u540e JS \u628a\u53d1\u8d34\u5185\u5bb9\u62fc\u63a5\u6210\u76ee\u6807 URL \u5e76\u8bbf\u95ee\uff1a http://example.com/bbs/create_post.php?title=\u6807\u9898&content=\u5185\u5bb9 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8bba\u575b\u4e2d\u53d1\u4e00\u5e16\uff0c\u5305\u542b\u4e00\u94fe\u63a5\uff1a http://example.com/bbs/create_post.php?title=\u6211\u662f\u8111\u6b8b&content=\u54c8\u54c8 \u53ea\u8981\u6709\u7528\u6237\u70b9\u51fb\u4e86\u8fd9\u4e2a\u94fe\u63a5\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u5e10\u6237\u5c31\u4f1a\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u53d1\u5e03\u4e86\u8fd9\u4e00\u5e16\u5b50\u3002\u53ef\u80fd\u8fd9\u53ea\u662f\u4e2a\u6076\u4f5c\u5267\uff0c\u4f46\u662f\u65e2\u7136\u53d1\u8d34\u7684\u8bf7\u6c42\u53ef\u4ee5\u4f2a\u9020\uff0c\u90a3\u4e48\u5220\u5e16\u3001\u8f6c\u5e10\u3001\u6539\u5bc6\u7801\u3001\u53d1\u90ae\u4ef6\u5168\u90fd\u53ef\u4ee5\u4f2a\u9020\u3002 \u5982\u4f55\u9632\u8303 CSRF \u653b\u51fb \uff1f\u53ef\u4ee5\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5173\u952e\u64cd\u4f5c\u53ea\u63a5\u53d7POST\u8bf7\u6c42 \u9a8c\u8bc1\u7801\u3002CSRF\u653b\u51fb\u7684\u8fc7\u7a0b\uff0c\u5f80\u5f80\u662f\u5728\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6784\u9020\u7f51\u7edc\u8bf7\u6c42\u3002\u6240\u4ee5\u5982\u679c\u4f7f\u7528\u9a8c\u8bc1\u7801\uff0c\u90a3\u4e48\u6bcf\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u7528\u6237\u8fdb\u884c\u4e92\u52a8\uff0c\u4ece\u800c\u7b80\u5355\u6709\u6548\u7684\u9632\u5fa1\u4e86CSRF\u653b\u51fb\u3002\u4f46\u662f\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u7f51\u7ad9\u4f5c\u51fa\u4efb\u4f55\u4e3e\u52a8\u90fd\u8981\u8f93\u5165\u9a8c\u8bc1\u7801\u4f1a\u4e25\u91cd\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\uff0c\u6240\u4ee5\u9a8c\u8bc1\u7801\u4e00\u822c\u53ea\u51fa\u73b0\u5728\u7279\u6b8a\u64cd\u4f5c\u91cc\u9762\uff0c\u6216\u8005\u5728\u6ce8\u518c\u65f6\u5019\u4f7f\u7528\u3002 \u68c0\u6d4b Referer\u3002\u5e38\u89c1\u7684\u4e92\u8054\u7f51\u9875\u9762\u4e0e\u9875\u9762\u4e4b\u95f4\u662f\u5b58\u5728\u8054\u7cfb\u7684\uff0c\u6bd4\u5982\u4f60\u5728 www.baidu.com \u5e94\u8be5\u662f\u627e\u4e0d\u5230\u901a\u5f80 www.google.com \u7684\u94fe\u63a5\u7684\uff0c\u518d\u6bd4\u5982\u4f60\u5728\u8bba\u575b\u7559\u8a00\uff0c\u90a3\u4e48\u4e0d\u7ba1\u4f60\u7559\u8a00\u540e\u91cd\u5b9a\u5411\u5230\u54ea\u91cc\u53bb\u4e86\uff0c\u4e4b\u524d\u7684\u90a3\u4e2a\u7f51\u5740\u4e00\u5b9a\u4f1a\u5305\u542b\u7559\u8a00\u7684\u8f93\u5165\u6846\uff0c\u8fd9\u4e2a\u4e4b\u524d\u7684\u7f51\u5740\u5c31\u4f1a\u4fdd\u7559\u5728\u65b0\u9875\u9762\u5934\u6587\u4ef6\u7684 Referer \u4e2d\u3002\u901a\u8fc7\u68c0\u67e5 Referer \u7684\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5408\u6cd5\u7684\u8fd8\u662f\u975e\u6cd5\u7684\uff0c\u4f46\u662f\u95ee\u9898\u51fa\u5728\u670d\u52a1\u5668\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u80fd\u63a5\u53d7\u5230 Referer \u7684\u503c\uff0c\u6240\u4ee5 Referer Check \u4e00\u822c\u7528\u4e8e\u76d1\u63a7 CSRF \u653b\u51fb\u7684\u53d1\u751f\uff0c\u800c\u4e0d\u7528\u6765\u62b5\u5fa1\u653b\u51fb\u3002 Token\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u505a\u6cd5\u662f\u4f7f\u7528 Token \u62b5\u5fa1 CSRF \u653b\u51fb\u3002Token \u4f7f\u7528\u539f\u5219\uff1aToken \u8981\u8db3\u591f\u968f\u673a\u2014\u2014\u2014\u2014\u53ea\u6709\u8fd9\u6837\u624d\u7b97\u4e0d\u53ef\u9884\u6d4b\uff1bToken \u662f\u4e00\u6b21\u6027\u7684\uff0c\u5373\u6bcf\u6b21\u8bf7\u6c42\u6210\u529f\u540e\u8981\u66f4\u65b0Token\u2014\u2014\u2014\u2014\u8fd9\u6837\u53ef\u4ee5\u589e\u52a0\u653b\u51fb\u96be\u5ea6\uff0c\u589e\u52a0\u9884\u6d4b\u96be\u5ea6\uff1bToken \u8981\u6ce8\u610f\u4fdd\u5bc6\u6027\u2014\u2014\u2014\u2014\u654f\u611f\u64cd\u4f5c\u4f7f\u7528 post\uff0c\u9632\u6b62 Token \u51fa\u73b0\u5728 URL \u4e2d\u3002 \u6ce8\u610f \uff1a\u8fc7\u6ee4\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9 \u4e0d\u80fd \u963b\u6321 csrf\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u8fc7\u6ee4\u8bf7\u6c42\u7684 \u6765\u6e90 \u3002 XSS\uff08Cross Site Scripting\uff0c\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff09XSS \u5168\u79f0\u201c\u8de8\u7ad9\u811a\u672c\u201d\uff0c\u662f\u6ce8\u5165\u653b\u51fb\u7684\u4e00\u79cd\u3002\u5176\u7279\u70b9\u662f\u4e0d\u5bf9\u670d\u52a1\u5668\u7aef\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u4e9b\u6b63\u5e38\u7684\u7ad9\u5185\u4ea4\u4e92\u9014\u5f84\uff0c\u4f8b\u5982\u53d1\u5e03\u8bc4\u8bba\uff0c\u63d0\u4ea4\u542b\u6709 JavaScript \u7684\u5185\u5bb9\u6587\u672c\u3002\u8fd9\u65f6\u670d\u52a1\u5668\u7aef\u5982\u679c\u6ca1\u6709\u8fc7\u6ee4\u6216\u8f6c\u4e49\u6389\u8fd9\u4e9b\u811a\u672c\uff0c\u4f5c\u4e3a\u5185\u5bb9\u53d1\u5e03\u5230\u4e86\u9875\u9762\u4e0a\uff0c\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u7684\u65f6\u5019\u5c31\u4f1a\u8fd0\u884c\u8fd9\u4e9b\u811a\u672c\u3002\u8fd0\u884c\u9884\u671f\u4e4b\u5916\u7684\u811a\u672c\u5e26\u6765\u7684\u540e\u679c\u6709\u5f88\u591a\u4e2d\uff0c\u53ef\u80fd\u53ea\u662f\u7b80\u5355\u7684\u6076\u4f5c\u5267\u2014\u2014\u4e00\u4e2a\u5173\u4e0d\u6389\u7684\u7a97\u53e3\uff1a while (true) { alert(\"\u4f60\u5173\u4e0d\u6389\u6211~\"); } \u770b\u5230\u4e0a\u9762\u8bf4\u7684\u8fd9\u4e9b\uff0c\u4f60\u662f\u4e0d\u662f\u975e\u5e38\u719f\u6089\uff0c\u8fd9\u548c\u6211\u4eec\u6bcf\u5929\u505a\u7684\u53cd\u722c\u866b\u5f88\u76f8\u4f3c\u561b\u3002\u9a8c\u8bc1\u7801\u3001Referer\u3001Token\uff0c\u6bcf\u4e00\u70b9\u90fd\u9700\u8981\u6ce8\u610f\uff0c\u66f4\u7ec6\u7684\u6211\u4eec\u4ee5\u540e\u518d\u8bf4\u3002","title":"\u8de8\u7ad9\u653b\u51fb"},{"location":"network/HTTP/#_5","text":"\u6253\u5f00 \u77e5\u4e4e\u9996\u9875 \uff0c\u4e0b\u62c9\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u53eb session_token \u7684\u53c2\u6570\uff0c\u53bb\u63a2\u7d22\uff0c\u8fd9\u4e2atoken\u5e26\u8fb9\u4ec0\u4e48\u610f\u601d\uff0c\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u722c\u866b\u4f1a\u9700\u8981\u5b83\u5417\uff1f","title":"\u5b9e\u8df5"},{"location":"network/HTTP/#_6","text":"\u6d45\u8c08HTTP\u4e2dGet\u4e0ePost\u7684\u533a\u522b http\u8bf7\u6c42\u4e0ehttp\u54cd\u5e94\u8be6\u7ec6\u89e3\u6790 HTTP \u6761\u4ef6 Get (Conditional Get) HTTP\u4e2d\u7684\u957f\u8fde\u63a5\u4e0e\u77ed\u8fde\u63a5 HTTP Keep-Alive\u6a21\u5f0f \u5206\u5757\u4f20\u8f93\u7f16\u7801 HTTP \u7ba1\u7ebf\u5316(HTTP pipelining) HTTP\u534f\u8bae\u53ca\u5176POST\u4e0eGET\u64cd\u4f5c\u5dee\u5f02 & C#\u4e2d\u5982\u4f55\u4f7f\u7528POST\u3001GET\u7b49 \u56db\u79cd\u5e38\u89c1\u7684 POST \u63d0\u4ea4\u6570\u636e\u65b9\u5f0f \u4f1a\u8bdd\u8ddf\u8e2a \u603b\u7ed3 XSS \u4e0e CSRF \u4e24\u79cd\u8de8\u7ad9\u653b\u51fb CSRF\u7b80\u5355\u4ecb\u7ecd\u4e0e\u5229\u7528\u65b9\u6cd5 XSS\u653b\u51fb\u53ca\u9632\u5fa1 \u767e\u5ea6\u767e\u79d1\uff1aHTTP HTTP\u7684\u7279\u6027 \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"network/TCP/","text":"TCP \u534f\u8bae TCP \u7684\u7279\u6027 TCP \u63d0\u4f9b\u4e00\u79cd \u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684 \u5b57\u8282\u6d41\u670d\u52a1 \u5728\u4e00\u4e2a TCP \u8fde\u63a5\u4e2d\uff0c\u4ec5\u6709\u4e24\u65b9\u8fdb\u884c\u5f7c\u6b64\u901a\u4fe1\u3002\u5e7f\u64ad\u548c\u591a\u64ad\u4e0d\u80fd\u7528\u4e8e TCP TCP \u4f7f\u7528\u6821\u9a8c\u548c\uff0c\u786e\u8ba4\u548c\u91cd\u4f20\u673a\u5236\u6765\u4fdd\u8bc1\u53ef\u9760\u4f20\u8f93 TCP \u7ed9\u6570\u636e\u5206\u8282\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4f7f\u7528\u7d2f\u79ef\u786e\u8ba4\u4fdd\u8bc1\u6570\u636e\u7684\u987a\u5e8f\u4e0d\u53d8\u548c\u975e\u91cd\u590d TCP \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u6765\u5b9e\u73b0\u6d41\u91cf\u63a7\u5236\uff0c\u901a\u8fc7\u52a8\u6001\u6539\u53d8\u7a97\u53e3\u7684\u5927\u5c0f\u8fdb\u884c\u62e5\u585e\u63a7\u5236 \u6ce8\u610f \uff1aTCP \u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u4e00\u5b9a\u4f1a\u88ab\u5bf9\u65b9\u63a5\u6536\u5230\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002TCP \u80fd\u591f\u505a\u5230\u7684\u662f\uff0c\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c31\u628a\u6570\u636e\u9012\u9001\u5230\u63a5\u6536\u65b9\uff0c\u5426\u5219\u5c31\uff08\u901a\u8fc7\u653e\u5f03\u91cd\u4f20\u5e76\u4e14\u4e2d\u65ad\u8fde\u63a5\u8fd9\u4e00\u624b\u6bb5\uff09\u901a\u77e5\u7528\u6237\u3002\u56e0\u6b64\u51c6\u786e\u8bf4 TCP \u4e5f\u4e0d\u662f 100% \u53ef\u9760\u7684\u534f\u8bae\uff0c\u5b83\u6240\u80fd\u63d0\u4f9b\u7684\u662f\u6570\u636e\u7684\u53ef\u9760\u9012\u9001\u6216\u6545\u969c\u7684\u53ef\u9760\u901a\u77e5\u3002 \u4e09\u6b21\u63e1\u624b\u4e0e\u56db\u6b21\u6325\u624b \u6240\u8c13\u4e09\u6b21\u63e1\u624b(Three-way Handshake)\uff0c\u662f\u6307\u5efa\u7acb\u4e00\u4e2a TCP \u8fde\u63a5\u65f6\uff0c\u9700\u8981\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u603b\u5171\u53d1\u90013\u4e2a\u5305\u3002 \u4e09\u6b21\u63e1\u624b\u7684\u76ee\u7684\u662f\u8fde\u63a5\u670d\u52a1\u5668\u6307\u5b9a\u7aef\u53e3\uff0c\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u5e76\u540c\u6b65\u8fde\u63a5\u53cc\u65b9\u7684\u5e8f\u5217\u53f7\u548c\u786e\u8ba4\u53f7\uff0c\u4ea4\u6362 TCP \u7a97\u53e3\u5927\u5c0f\u4fe1\u606f\u3002\u5728 socket \u7f16\u7a0b\u4e2d\uff0c\u5ba2\u6237\u7aef\u6267\u884c connect() \u65f6\u3002\u5c06\u89e6\u53d1\u4e09\u6b21\u63e1\u624b\u3002 \u7b2c\u4e00\u6b21\u63e1\u624b(SYN=1, seq=x)\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a TCP \u7684 SYN \u6807\u5fd7\u4f4d\u7f6e1\u7684\u5305\uff0c\u6307\u660e\u5ba2\u6237\u7aef\u6253\u7b97\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff0c\u4ee5\u53ca\u521d\u59cb\u5e8f\u53f7 X,\u4fdd\u5b58\u5728\u5305\u5934\u7684\u5e8f\u5217\u53f7(Sequence Number)\u5b57\u6bb5\u91cc\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 SYN_SEND \u72b6\u6001\u3002 \u7b2c\u4e8c\u6b21\u63e1\u624b(SYN=1, ACK=1, seq=y, ACKnum=x+1)\uff1a\u670d\u52a1\u5668\u53d1\u56de\u786e\u8ba4\u5305(ACK)\u5e94\u7b54\u3002\u5373 SYN \u6807\u5fd7\u4f4d\u548c ACK \u6807\u5fd7\u4f4d\u5747\u4e3a1\u3002\u670d\u52a1\u5668\u7aef\u9009\u62e9\u81ea\u5df1 ISN \u5e8f\u5217\u53f7\uff0c\u653e\u5230 Seq \u57df\u91cc\uff0c\u540c\u65f6\u5c06\u786e\u8ba4\u5e8f\u53f7(Acknowledgement Number)\u8bbe\u7f6e\u4e3a\u5ba2\u6237\u7684 ISN \u52a01\uff0c\u5373X+1\u3002 \u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 SYN_RCVD \u72b6\u6001\u3002 \u7b2c\u4e09\u6b21\u63e1\u624b(ACK=1\uff0cACKnum=y+1)\uff1a\u5ba2\u6237\u7aef\u518d\u6b21\u53d1\u9001\u786e\u8ba4\u5305(ACK)\uff0cSYN \u6807\u5fd7\u4f4d\u4e3a0\uff0cACK \u6807\u5fd7\u4f4d\u4e3a1\uff0c\u5e76\u4e14\u628a\u670d\u52a1\u5668\u53d1\u6765 ACK \u7684\u5e8f\u53f7\u5b57\u6bb5+1\uff0c\u653e\u5728\u786e\u5b9a\u5b57\u6bb5\u4e2d\u53d1\u9001\u7ed9\u5bf9\u65b9\uff0c\u5e76\u4e14\u5728\u6570\u636e\u6bb5\u653e\u5199ISN\u7684+1\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 ESTABLISHED \u72b6\u6001\uff0c\u5f53\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u5305\u65f6\uff0c\u4e5f\u8fdb\u5165 ESTABLISHED \u72b6\u6001\uff0cTCP \u63e1\u624b\u7ed3\u675f\u3002 \u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a TCP \u7684\u8fde\u63a5\u7684\u62c6\u9664\u9700\u8981\u53d1\u9001\u56db\u4e2a\u5305\uff0c\u56e0\u6b64\u79f0\u4e3a\u56db\u6b21\u6325\u624b(Four-way handshake)\uff0c\u4e5f\u53eb\u505a\u6539\u8fdb\u7684\u4e09\u6b21\u63e1\u624b\u3002\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u5747\u53ef\u4e3b\u52a8\u53d1\u8d77\u6325\u624b\u52a8\u4f5c\uff0c\u5728 socket \u7f16\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u6267\u884c close() \u64cd\u4f5c\u5373\u53ef\u4ea7\u751f\u6325\u624b\u64cd\u4f5c\u3002 \u7b2c\u4e00\u6b21\u6325\u624b(FIN=1\uff0cseq=x)\uff1a\u5047\u8bbe\u5ba2\u6237\u7aef\u60f3\u8981\u5173\u95ed\u8fde\u63a5\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a FIN \u6807\u5fd7\u4f4d\u7f6e\u4e3a1\u7684\u5305\uff0c\u8868\u793a\u81ea\u5df1\u5df2\u7ecf\u6ca1\u6709\u6570\u636e\u53ef\u4ee5\u53d1\u9001\u4e86\uff0c\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u63a5\u53d7\u6570\u636e\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 FIN_WAIT_1 \u72b6\u6001\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b(ACK=1\uff0cACKnum=x+1)\uff1a\u670d\u52a1\u5668\u7aef\u786e\u8ba4\u5ba2\u6237\u7aef\u7684 FIN \u5305\uff0c\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u5305\uff0c\u8868\u660e\u81ea\u5df1\u63a5\u53d7\u5230\u4e86\u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u4f46\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u5173\u95ed\u8fde\u63a5\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 CLOSE_WAIT \u72b6\u6001\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u786e\u8ba4\u5305\u4e4b\u540e\uff0c\u8fdb\u5165 FIN_WAIT_2 \u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u7aef\u5173\u95ed\u8fde\u63a5\u3002 \u7b2c\u4e09\u6b21\u6325\u624b(FIN=1\uff0cseq=y)\uff1a\u670d\u52a1\u5668\u7aef\u51c6\u5907\u597d\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u7ed3\u675f\u8fde\u63a5\u8bf7\u6c42\uff0cFIN \u7f6e\u4e3a1\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 LAST_ACK \u72b6\u6001\uff0c\u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6700\u540e\u4e00\u4e2aACK\u3002 \u7b2c\u56db\u6b21\u6325\u624b(ACK=1\uff0cACKnum=y+1)\uff1a\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6765\u81ea\u670d\u52a1\u5668\u7aef\u7684\u5173\u95ed\u8bf7\u6c42\uff0c\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u5305\uff0c\u5e76\u8fdb\u5165 TIME_WAIT \u72b6\u6001\uff0c\u7b49\u5f85\u53ef\u80fd\u51fa\u73b0\u7684\u8981\u6c42\u91cd\u4f20\u7684 ACK \u5305\u3002\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u786e\u8ba4\u5305\u4e4b\u540e\uff0c\u5173\u95ed\u8fde\u63a5\uff0c\u8fdb\u5165 CLOSED \u72b6\u6001\u3002\u5ba2\u6237\u7aef\u7b49\u5f85\u4e86\u67d0\u4e2a\u56fa\u5b9a\u65f6\u95f4\uff08\u4e24\u4e2a\u6700\u5927\u6bb5\u751f\u547d\u5468\u671f\uff0c2MSL\uff0c2 Maximum Segment Lifetime\uff09\u4e4b\u540e\uff0c\u6ca1\u6709\u6536\u5230\u670d\u52a1\u5668\u7aef\u7684 ACK \uff0c\u8ba4\u4e3a\u670d\u52a1\u5668\u7aef\u5df2\u7ecf\u6b63\u5e38\u5173\u95ed\u8fde\u63a5\uff0c\u4e8e\u662f\u81ea\u5df1\u4e5f\u5173\u95ed\u8fde\u63a5\uff0c\u8fdb\u5165 CLOSED \u72b6\u6001\u3002 \u56db\u6b21\u6325\u624b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a SYN\u653b\u51fb \u4ec0\u4e48\u662f SYN \u653b\u51fb\uff08SYN Flood\uff09\uff1f \u5728\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\u4e2d\uff0c\u670d\u52a1\u5668\u53d1\u9001 SYN-ACK \u4e4b\u540e\uff0c\u6536\u5230\u5ba2\u6237\u7aef\u7684 ACK \u4e4b\u524d\u7684 TCP \u8fde\u63a5\u79f0\u4e3a\u534a\u8fde\u63a5(half-open connect)\u3002\u6b64\u65f6\u670d\u52a1\u5668\u5904\u4e8e SYN_RCVD \u72b6\u6001\u3002\u5f53\u6536\u5230 ACK \u540e\uff0c\u670d\u52a1\u5668\u624d\u80fd\u8f6c\u5165 ESTABLISHED \u72b6\u6001. SYN \u653b\u51fb\u6307\u7684\u662f\uff0c\u653b\u51fb\u5ba2\u6237\u7aef\u5728\u77ed\u65f6\u95f4\u5185\u4f2a\u9020\u5927\u91cf\u4e0d\u5b58\u5728\u7684IP\u5730\u5740\uff0c\u5411\u670d\u52a1\u5668\u4e0d\u65ad\u5730\u53d1\u9001SYN\u5305\uff0c\u670d\u52a1\u5668\u56de\u590d\u786e\u8ba4\u5305\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7684\u786e\u8ba4\u3002\u7531\u4e8e\u6e90\u5730\u5740\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u670d\u52a1\u5668\u9700\u8981\u4e0d\u65ad\u7684\u91cd\u53d1\u76f4\u81f3\u8d85\u65f6\uff0c\u8fd9\u4e9b\u4f2a\u9020\u7684SYN\u5305\u5c06\u957f\u65f6\u95f4\u5360\u7528\u672a\u8fde\u63a5\u961f\u5217\uff0c\u6b63\u5e38\u7684SYN\u8bf7\u6c42\u88ab\u4e22\u5f03\uff0c\u5bfc\u81f4\u76ee\u6807\u7cfb\u7edf\u8fd0\u884c\u7f13\u6162\uff0c\u4e25\u91cd\u8005\u4f1a\u5f15\u8d77\u7f51\u7edc\u5835\u585e\u751a\u81f3\u7cfb\u7edf\u762b\u75ea\u3002 SYN \u653b\u51fb\u662f\u4e00\u79cd\u5178\u578b\u7684 DoS/DDoS \u653b\u51fb\u3002 \u5982\u4f55\u68c0\u6d4b SYN \u653b\u51fb\uff1f \u68c0\u6d4b SYN \u653b\u51fb\u975e\u5e38\u7684\u65b9\u4fbf\uff0c\u5f53\u4f60\u5728\u670d\u52a1\u5668\u4e0a\u770b\u5230\u5927\u91cf\u7684\u534a\u8fde\u63a5\u72b6\u6001\u65f6\uff0c\u7279\u522b\u662f\u6e90IP\u5730\u5740\u662f\u968f\u673a\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f\u4e00\u6b21SYN\u653b\u51fb\u3002\u5728 Linux/Unix \u4e0a\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684 netstats \u547d\u4ee4\u6765\u68c0\u6d4b SYN \u653b\u51fb\u3002 \u5982\u4f55\u9632\u5fa1 SYN \u653b\u51fb\uff1f SYN\u653b\u51fb\u4e0d\u80fd\u5b8c\u5168\u88ab\u963b\u6b62\uff0c\u9664\u975e\u5c06TCP\u534f\u8bae\u91cd\u65b0\u8bbe\u8ba1\u3002\u6211\u4eec\u6240\u505a\u7684\u662f\u5c3d\u53ef\u80fd\u7684\u51cf\u8f7bSYN\u653b\u51fb\u7684\u5371\u5bb3\uff0c\u5e38\u89c1\u7684\u9632\u5fa1 SYN \u653b\u51fb\u7684\u65b9\u6cd5\u6709\u5982\u4e0b\u51e0\u79cd\uff1a \u7f29\u77ed\u8d85\u65f6\uff08SYN Timeout\uff09\u65f6\u95f4 \u589e\u52a0\u6700\u5927\u534a\u8fde\u63a5\u6570 \u8fc7\u6ee4\u7f51\u5173\u9632\u62a4 SYN cookies\u6280\u672f TCP KeepAlive TCP \u7684\u8fde\u63a5\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7eaf\u8f6f\u4ef6\u5c42\u9762\u7684\u6982\u5ff5\uff0c\u5728\u7269\u7406\u5c42\u9762\u5e76\u6ca1\u6709\u201c\u8fde\u63a5\u201d\u8fd9\u79cd\u6982\u5ff5\u3002TCP \u901a\u4fe1\u53cc\u65b9\u5efa\u7acb\u4ea4\u4e92\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4e00\u76f4\u5b58\u5728\u6570\u636e\u4ea4\u4e92\uff0c\u6709\u4e9b\u8fde\u63a5\u4f1a\u5728\u6570\u636e\u4ea4\u4e92\u5b8c\u6bd5\u540e\uff0c\u4e3b\u52a8\u91ca\u653e\u8fde\u63a5\uff0c\u800c\u6709\u4e9b\u4e0d\u4f1a\u3002\u5728\u957f\u65f6\u95f4\u65e0\u6570\u636e\u4ea4\u4e92\u7684\u65f6\u95f4\u6bb5\u5185\uff0c\u4ea4\u4e92\u53cc\u65b9\u90fd\u6709\u53ef\u80fd\u51fa\u73b0\u6389\u7535\u3001\u6b7b\u673a\u3001\u5f02\u5e38\u91cd\u542f\u7b49\u5404\u79cd\u610f\u5916\uff0c\u5f53\u8fd9\u4e9b\u610f\u5916\u53d1\u751f\u4e4b\u540e\uff0c\u8fd9\u4e9b TCP \u8fde\u63a5\u5e76\u672a\u6765\u5f97\u53ca\u6b63\u5e38\u91ca\u653e\uff0c\u5728\u8f6f\u4ef6\u5c42\u9762\u4e0a\uff0c\u8fde\u63a5\u7684\u53e6\u4e00\u65b9\u5e76\u4e0d\u77e5\u9053\u5bf9\u7aef\u7684\u60c5\u51b5\uff0c\u5b83\u4f1a\u4e00\u76f4\u7ef4\u62a4\u8fd9\u4e2a\u8fde\u63a5\uff0c\u957f\u65f6\u95f4\u7684\u79ef\u7d2f\u4f1a\u5bfc\u81f4\u975e\u5e38\u591a\u7684\u534a\u6253\u5f00\u8fde\u63a5\uff0c\u9020\u6210\u7aef\u7cfb\u7edf\u8d44\u6e90\u7684\u6d88\u8017\u548c\u6d6a\u8d39\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u4f20\u8f93\u5c42\u53ef\u4ee5\u5229\u7528 TCP \u7684 KeepAlive \u673a\u5236\u5b9e\u73b0\u6765\u5b9e\u73b0\u3002\u4e3b\u6d41\u7684\u64cd\u4f5c\u7cfb\u7edf\u57fa\u672c\u90fd\u5728\u5185\u6838\u91cc\u652f\u6301\u4e86\u8fd9\u4e2a\u7279\u6027\u3002 TCP KeepAlive \u7684\u57fa\u672c\u539f\u7406\u662f\uff0c\u9694\u4e00\u6bb5\u65f6\u95f4\u7ed9\u8fde\u63a5\u5bf9\u7aef\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u5305\uff0c\u5982\u679c\u6536\u5230\u5bf9\u65b9\u56de\u5e94\u7684 ACK\uff0c\u5219\u8ba4\u4e3a\u8fde\u63a5\u8fd8\u662f\u5b58\u6d3b\u7684\uff0c\u5728\u8d85\u8fc7\u4e00\u5b9a\u91cd\u8bd5\u6b21\u6570\u4e4b\u540e\u8fd8\u662f\u6ca1\u6709\u6536\u5230\u5bf9\u65b9\u7684\u56de\u5e94\uff0c\u5219\u4e22\u5f03\u8be5 TCP \u8fde\u63a5\u3002 TCP-Keepalive-HOWTO \u6709\u5bf9 TCP KeepAlive \u7279\u6027\u7684\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u3002\u8fd9\u91cc\u4e3b\u8981\u8bf4\u4e00\u4e0b\uff0cTCP KeepAlive \u7684\u5c40\u9650\u3002\u9996\u5148 TCP KeepAlive \u76d1\u6d4b\u7684\u65b9\u5f0f\u662f\u53d1\u9001\u4e00\u4e2a probe \u5305\uff0c\u4f1a\u7ed9\u7f51\u7edc\u5e26\u6765\u989d\u5916\u7684\u6d41\u91cf\uff0c\u53e6\u5916 TCP KeepAlive \u53ea\u80fd\u5728\u5185\u6838\u5c42\u7ea7\u76d1\u6d4b\u8fde\u63a5\u7684\u5b58\u6d3b\u4e0e\u5426\uff0c\u800c\u8fde\u63a5\u7684\u5b58\u6d3b\u4e0d\u4e00\u5b9a\u4ee3\u8868\u670d\u52a1\u7684\u53ef\u7528\u3002\u4f8b\u5982\u5f53\u4e00\u4e2a\u670d\u52a1\u5668 CPU \u8fdb\u7a0b\u670d\u52a1\u5668\u5360\u7528\u8fbe\u5230 100%\uff0c\u5df2\u7ecf\u5361\u6b7b\u4e0d\u80fd\u54cd\u5e94\u8bf7\u6c42\u4e86\uff0c\u6b64\u65f6 TCP KeepAlive \u4f9d\u7136\u4f1a\u8ba4\u4e3a\u8fde\u63a5\u662f\u5b58\u6d3b\u7684\u3002\u56e0\u6b64 TCP KeepAlive \u5bf9\u4e8e\u5e94\u7528\u5c42\u7a0b\u5e8f\u7684\u4ef7\u503c\u662f\u76f8\u5bf9\u8f83\u5c0f\u7684\u3002\u9700\u8981\u505a\u8fde\u63a5\u4fdd\u6d3b\u7684\u5e94\u7528\u5c42\u7a0b\u5e8f\uff0c\u4f8b\u5982 QQ\uff0c\u5f80\u5f80\u4f1a\u5728\u5e94\u7528\u5c42\u5b9e\u73b0\u81ea\u5df1\u7684\u5fc3\u8df3\u529f\u80fd\u3002 \u53c2\u8003\u8d44\u6599 \u8ba1\u7b97\u673a\u7f51\u7edc\uff1a\u81ea\u9876\u5411\u4e0b\u65b9\u6cd5 TCP\u4e09\u6b21\u63e1\u624b\u53ca\u56db\u6b21\u6325\u624b\u8be6\u7ec6\u56fe\u89e3 TCP\u534f\u8bae\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\u5206\u6790 TCP\u534f\u8bae\u4e2d\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b(\u56fe\u89e3) \u767e\u5ea6\u767e\u79d1\uff1aSYN\u653b\u51fb TCP-Keepalive-HOWTO TCP \u7684\u7279\u6027 \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"TCP\u534f\u8bae"},{"location":"network/TCP/#tcp","text":"","title":"TCP \u534f\u8bae"},{"location":"network/TCP/#tcp_1","text":"TCP \u63d0\u4f9b\u4e00\u79cd \u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684 \u5b57\u8282\u6d41\u670d\u52a1 \u5728\u4e00\u4e2a TCP \u8fde\u63a5\u4e2d\uff0c\u4ec5\u6709\u4e24\u65b9\u8fdb\u884c\u5f7c\u6b64\u901a\u4fe1\u3002\u5e7f\u64ad\u548c\u591a\u64ad\u4e0d\u80fd\u7528\u4e8e TCP TCP \u4f7f\u7528\u6821\u9a8c\u548c\uff0c\u786e\u8ba4\u548c\u91cd\u4f20\u673a\u5236\u6765\u4fdd\u8bc1\u53ef\u9760\u4f20\u8f93 TCP \u7ed9\u6570\u636e\u5206\u8282\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4f7f\u7528\u7d2f\u79ef\u786e\u8ba4\u4fdd\u8bc1\u6570\u636e\u7684\u987a\u5e8f\u4e0d\u53d8\u548c\u975e\u91cd\u590d TCP \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u6765\u5b9e\u73b0\u6d41\u91cf\u63a7\u5236\uff0c\u901a\u8fc7\u52a8\u6001\u6539\u53d8\u7a97\u53e3\u7684\u5927\u5c0f\u8fdb\u884c\u62e5\u585e\u63a7\u5236 \u6ce8\u610f \uff1aTCP \u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u4e00\u5b9a\u4f1a\u88ab\u5bf9\u65b9\u63a5\u6536\u5230\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002TCP \u80fd\u591f\u505a\u5230\u7684\u662f\uff0c\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c31\u628a\u6570\u636e\u9012\u9001\u5230\u63a5\u6536\u65b9\uff0c\u5426\u5219\u5c31\uff08\u901a\u8fc7\u653e\u5f03\u91cd\u4f20\u5e76\u4e14\u4e2d\u65ad\u8fde\u63a5\u8fd9\u4e00\u624b\u6bb5\uff09\u901a\u77e5\u7528\u6237\u3002\u56e0\u6b64\u51c6\u786e\u8bf4 TCP \u4e5f\u4e0d\u662f 100% \u53ef\u9760\u7684\u534f\u8bae\uff0c\u5b83\u6240\u80fd\u63d0\u4f9b\u7684\u662f\u6570\u636e\u7684\u53ef\u9760\u9012\u9001\u6216\u6545\u969c\u7684\u53ef\u9760\u901a\u77e5\u3002","title":"TCP \u7684\u7279\u6027"},{"location":"network/TCP/#_1","text":"\u6240\u8c13\u4e09\u6b21\u63e1\u624b(Three-way Handshake)\uff0c\u662f\u6307\u5efa\u7acb\u4e00\u4e2a TCP \u8fde\u63a5\u65f6\uff0c\u9700\u8981\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u603b\u5171\u53d1\u90013\u4e2a\u5305\u3002 \u4e09\u6b21\u63e1\u624b\u7684\u76ee\u7684\u662f\u8fde\u63a5\u670d\u52a1\u5668\u6307\u5b9a\u7aef\u53e3\uff0c\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u5e76\u540c\u6b65\u8fde\u63a5\u53cc\u65b9\u7684\u5e8f\u5217\u53f7\u548c\u786e\u8ba4\u53f7\uff0c\u4ea4\u6362 TCP \u7a97\u53e3\u5927\u5c0f\u4fe1\u606f\u3002\u5728 socket \u7f16\u7a0b\u4e2d\uff0c\u5ba2\u6237\u7aef\u6267\u884c connect() \u65f6\u3002\u5c06\u89e6\u53d1\u4e09\u6b21\u63e1\u624b\u3002 \u7b2c\u4e00\u6b21\u63e1\u624b(SYN=1, seq=x)\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a TCP \u7684 SYN \u6807\u5fd7\u4f4d\u7f6e1\u7684\u5305\uff0c\u6307\u660e\u5ba2\u6237\u7aef\u6253\u7b97\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff0c\u4ee5\u53ca\u521d\u59cb\u5e8f\u53f7 X,\u4fdd\u5b58\u5728\u5305\u5934\u7684\u5e8f\u5217\u53f7(Sequence Number)\u5b57\u6bb5\u91cc\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 SYN_SEND \u72b6\u6001\u3002 \u7b2c\u4e8c\u6b21\u63e1\u624b(SYN=1, ACK=1, seq=y, ACKnum=x+1)\uff1a\u670d\u52a1\u5668\u53d1\u56de\u786e\u8ba4\u5305(ACK)\u5e94\u7b54\u3002\u5373 SYN \u6807\u5fd7\u4f4d\u548c ACK \u6807\u5fd7\u4f4d\u5747\u4e3a1\u3002\u670d\u52a1\u5668\u7aef\u9009\u62e9\u81ea\u5df1 ISN \u5e8f\u5217\u53f7\uff0c\u653e\u5230 Seq \u57df\u91cc\uff0c\u540c\u65f6\u5c06\u786e\u8ba4\u5e8f\u53f7(Acknowledgement Number)\u8bbe\u7f6e\u4e3a\u5ba2\u6237\u7684 ISN \u52a01\uff0c\u5373X+1\u3002 \u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 SYN_RCVD \u72b6\u6001\u3002 \u7b2c\u4e09\u6b21\u63e1\u624b(ACK=1\uff0cACKnum=y+1)\uff1a\u5ba2\u6237\u7aef\u518d\u6b21\u53d1\u9001\u786e\u8ba4\u5305(ACK)\uff0cSYN \u6807\u5fd7\u4f4d\u4e3a0\uff0cACK \u6807\u5fd7\u4f4d\u4e3a1\uff0c\u5e76\u4e14\u628a\u670d\u52a1\u5668\u53d1\u6765 ACK \u7684\u5e8f\u53f7\u5b57\u6bb5+1\uff0c\u653e\u5728\u786e\u5b9a\u5b57\u6bb5\u4e2d\u53d1\u9001\u7ed9\u5bf9\u65b9\uff0c\u5e76\u4e14\u5728\u6570\u636e\u6bb5\u653e\u5199ISN\u7684+1\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 ESTABLISHED \u72b6\u6001\uff0c\u5f53\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u5305\u65f6\uff0c\u4e5f\u8fdb\u5165 ESTABLISHED \u72b6\u6001\uff0cTCP \u63e1\u624b\u7ed3\u675f\u3002 \u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a TCP \u7684\u8fde\u63a5\u7684\u62c6\u9664\u9700\u8981\u53d1\u9001\u56db\u4e2a\u5305\uff0c\u56e0\u6b64\u79f0\u4e3a\u56db\u6b21\u6325\u624b(Four-way handshake)\uff0c\u4e5f\u53eb\u505a\u6539\u8fdb\u7684\u4e09\u6b21\u63e1\u624b\u3002\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u5747\u53ef\u4e3b\u52a8\u53d1\u8d77\u6325\u624b\u52a8\u4f5c\uff0c\u5728 socket \u7f16\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u6267\u884c close() \u64cd\u4f5c\u5373\u53ef\u4ea7\u751f\u6325\u624b\u64cd\u4f5c\u3002 \u7b2c\u4e00\u6b21\u6325\u624b(FIN=1\uff0cseq=x)\uff1a\u5047\u8bbe\u5ba2\u6237\u7aef\u60f3\u8981\u5173\u95ed\u8fde\u63a5\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a FIN \u6807\u5fd7\u4f4d\u7f6e\u4e3a1\u7684\u5305\uff0c\u8868\u793a\u81ea\u5df1\u5df2\u7ecf\u6ca1\u6709\u6570\u636e\u53ef\u4ee5\u53d1\u9001\u4e86\uff0c\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u63a5\u53d7\u6570\u636e\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165 FIN_WAIT_1 \u72b6\u6001\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b(ACK=1\uff0cACKnum=x+1)\uff1a\u670d\u52a1\u5668\u7aef\u786e\u8ba4\u5ba2\u6237\u7aef\u7684 FIN \u5305\uff0c\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u5305\uff0c\u8868\u660e\u81ea\u5df1\u63a5\u53d7\u5230\u4e86\u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u4f46\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u5173\u95ed\u8fde\u63a5\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 CLOSE_WAIT \u72b6\u6001\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u786e\u8ba4\u5305\u4e4b\u540e\uff0c\u8fdb\u5165 FIN_WAIT_2 \u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u7aef\u5173\u95ed\u8fde\u63a5\u3002 \u7b2c\u4e09\u6b21\u6325\u624b(FIN=1\uff0cseq=y)\uff1a\u670d\u52a1\u5668\u7aef\u51c6\u5907\u597d\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u7ed3\u675f\u8fde\u63a5\u8bf7\u6c42\uff0cFIN \u7f6e\u4e3a1\u3002\u53d1\u9001\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u8fdb\u5165 LAST_ACK \u72b6\u6001\uff0c\u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6700\u540e\u4e00\u4e2aACK\u3002 \u7b2c\u56db\u6b21\u6325\u624b(ACK=1\uff0cACKnum=y+1)\uff1a\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6765\u81ea\u670d\u52a1\u5668\u7aef\u7684\u5173\u95ed\u8bf7\u6c42\uff0c\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u5305\uff0c\u5e76\u8fdb\u5165 TIME_WAIT \u72b6\u6001\uff0c\u7b49\u5f85\u53ef\u80fd\u51fa\u73b0\u7684\u8981\u6c42\u91cd\u4f20\u7684 ACK \u5305\u3002\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u8fd9\u4e2a\u786e\u8ba4\u5305\u4e4b\u540e\uff0c\u5173\u95ed\u8fde\u63a5\uff0c\u8fdb\u5165 CLOSED \u72b6\u6001\u3002\u5ba2\u6237\u7aef\u7b49\u5f85\u4e86\u67d0\u4e2a\u56fa\u5b9a\u65f6\u95f4\uff08\u4e24\u4e2a\u6700\u5927\u6bb5\u751f\u547d\u5468\u671f\uff0c2MSL\uff0c2 Maximum Segment Lifetime\uff09\u4e4b\u540e\uff0c\u6ca1\u6709\u6536\u5230\u670d\u52a1\u5668\u7aef\u7684 ACK \uff0c\u8ba4\u4e3a\u670d\u52a1\u5668\u7aef\u5df2\u7ecf\u6b63\u5e38\u5173\u95ed\u8fde\u63a5\uff0c\u4e8e\u662f\u81ea\u5df1\u4e5f\u5173\u95ed\u8fde\u63a5\uff0c\u8fdb\u5165 CLOSED \u72b6\u6001\u3002 \u56db\u6b21\u6325\u624b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a","title":"\u4e09\u6b21\u63e1\u624b\u4e0e\u56db\u6b21\u6325\u624b"},{"location":"network/TCP/#syn","text":"","title":"SYN\u653b\u51fb"},{"location":"network/TCP/#syn-syn-flood","text":"\u5728\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\u4e2d\uff0c\u670d\u52a1\u5668\u53d1\u9001 SYN-ACK \u4e4b\u540e\uff0c\u6536\u5230\u5ba2\u6237\u7aef\u7684 ACK \u4e4b\u524d\u7684 TCP \u8fde\u63a5\u79f0\u4e3a\u534a\u8fde\u63a5(half-open connect)\u3002\u6b64\u65f6\u670d\u52a1\u5668\u5904\u4e8e SYN_RCVD \u72b6\u6001\u3002\u5f53\u6536\u5230 ACK \u540e\uff0c\u670d\u52a1\u5668\u624d\u80fd\u8f6c\u5165 ESTABLISHED \u72b6\u6001. SYN \u653b\u51fb\u6307\u7684\u662f\uff0c\u653b\u51fb\u5ba2\u6237\u7aef\u5728\u77ed\u65f6\u95f4\u5185\u4f2a\u9020\u5927\u91cf\u4e0d\u5b58\u5728\u7684IP\u5730\u5740\uff0c\u5411\u670d\u52a1\u5668\u4e0d\u65ad\u5730\u53d1\u9001SYN\u5305\uff0c\u670d\u52a1\u5668\u56de\u590d\u786e\u8ba4\u5305\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7684\u786e\u8ba4\u3002\u7531\u4e8e\u6e90\u5730\u5740\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u670d\u52a1\u5668\u9700\u8981\u4e0d\u65ad\u7684\u91cd\u53d1\u76f4\u81f3\u8d85\u65f6\uff0c\u8fd9\u4e9b\u4f2a\u9020\u7684SYN\u5305\u5c06\u957f\u65f6\u95f4\u5360\u7528\u672a\u8fde\u63a5\u961f\u5217\uff0c\u6b63\u5e38\u7684SYN\u8bf7\u6c42\u88ab\u4e22\u5f03\uff0c\u5bfc\u81f4\u76ee\u6807\u7cfb\u7edf\u8fd0\u884c\u7f13\u6162\uff0c\u4e25\u91cd\u8005\u4f1a\u5f15\u8d77\u7f51\u7edc\u5835\u585e\u751a\u81f3\u7cfb\u7edf\u762b\u75ea\u3002 SYN \u653b\u51fb\u662f\u4e00\u79cd\u5178\u578b\u7684 DoS/DDoS \u653b\u51fb\u3002","title":"\u4ec0\u4e48\u662f SYN \u653b\u51fb\uff08SYN Flood\uff09\uff1f"},{"location":"network/TCP/#syn_1","text":"\u68c0\u6d4b SYN \u653b\u51fb\u975e\u5e38\u7684\u65b9\u4fbf\uff0c\u5f53\u4f60\u5728\u670d\u52a1\u5668\u4e0a\u770b\u5230\u5927\u91cf\u7684\u534a\u8fde\u63a5\u72b6\u6001\u65f6\uff0c\u7279\u522b\u662f\u6e90IP\u5730\u5740\u662f\u968f\u673a\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f\u4e00\u6b21SYN\u653b\u51fb\u3002\u5728 Linux/Unix \u4e0a\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684 netstats \u547d\u4ee4\u6765\u68c0\u6d4b SYN \u653b\u51fb\u3002","title":"\u5982\u4f55\u68c0\u6d4b SYN \u653b\u51fb\uff1f"},{"location":"network/TCP/#syn_2","text":"SYN\u653b\u51fb\u4e0d\u80fd\u5b8c\u5168\u88ab\u963b\u6b62\uff0c\u9664\u975e\u5c06TCP\u534f\u8bae\u91cd\u65b0\u8bbe\u8ba1\u3002\u6211\u4eec\u6240\u505a\u7684\u662f\u5c3d\u53ef\u80fd\u7684\u51cf\u8f7bSYN\u653b\u51fb\u7684\u5371\u5bb3\uff0c\u5e38\u89c1\u7684\u9632\u5fa1 SYN \u653b\u51fb\u7684\u65b9\u6cd5\u6709\u5982\u4e0b\u51e0\u79cd\uff1a \u7f29\u77ed\u8d85\u65f6\uff08SYN Timeout\uff09\u65f6\u95f4 \u589e\u52a0\u6700\u5927\u534a\u8fde\u63a5\u6570 \u8fc7\u6ee4\u7f51\u5173\u9632\u62a4 SYN cookies\u6280\u672f","title":"\u5982\u4f55\u9632\u5fa1 SYN \u653b\u51fb\uff1f"},{"location":"network/TCP/#tcp-keepalive","text":"TCP \u7684\u8fde\u63a5\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7eaf\u8f6f\u4ef6\u5c42\u9762\u7684\u6982\u5ff5\uff0c\u5728\u7269\u7406\u5c42\u9762\u5e76\u6ca1\u6709\u201c\u8fde\u63a5\u201d\u8fd9\u79cd\u6982\u5ff5\u3002TCP \u901a\u4fe1\u53cc\u65b9\u5efa\u7acb\u4ea4\u4e92\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4e00\u76f4\u5b58\u5728\u6570\u636e\u4ea4\u4e92\uff0c\u6709\u4e9b\u8fde\u63a5\u4f1a\u5728\u6570\u636e\u4ea4\u4e92\u5b8c\u6bd5\u540e\uff0c\u4e3b\u52a8\u91ca\u653e\u8fde\u63a5\uff0c\u800c\u6709\u4e9b\u4e0d\u4f1a\u3002\u5728\u957f\u65f6\u95f4\u65e0\u6570\u636e\u4ea4\u4e92\u7684\u65f6\u95f4\u6bb5\u5185\uff0c\u4ea4\u4e92\u53cc\u65b9\u90fd\u6709\u53ef\u80fd\u51fa\u73b0\u6389\u7535\u3001\u6b7b\u673a\u3001\u5f02\u5e38\u91cd\u542f\u7b49\u5404\u79cd\u610f\u5916\uff0c\u5f53\u8fd9\u4e9b\u610f\u5916\u53d1\u751f\u4e4b\u540e\uff0c\u8fd9\u4e9b TCP \u8fde\u63a5\u5e76\u672a\u6765\u5f97\u53ca\u6b63\u5e38\u91ca\u653e\uff0c\u5728\u8f6f\u4ef6\u5c42\u9762\u4e0a\uff0c\u8fde\u63a5\u7684\u53e6\u4e00\u65b9\u5e76\u4e0d\u77e5\u9053\u5bf9\u7aef\u7684\u60c5\u51b5\uff0c\u5b83\u4f1a\u4e00\u76f4\u7ef4\u62a4\u8fd9\u4e2a\u8fde\u63a5\uff0c\u957f\u65f6\u95f4\u7684\u79ef\u7d2f\u4f1a\u5bfc\u81f4\u975e\u5e38\u591a\u7684\u534a\u6253\u5f00\u8fde\u63a5\uff0c\u9020\u6210\u7aef\u7cfb\u7edf\u8d44\u6e90\u7684\u6d88\u8017\u548c\u6d6a\u8d39\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u4f20\u8f93\u5c42\u53ef\u4ee5\u5229\u7528 TCP \u7684 KeepAlive \u673a\u5236\u5b9e\u73b0\u6765\u5b9e\u73b0\u3002\u4e3b\u6d41\u7684\u64cd\u4f5c\u7cfb\u7edf\u57fa\u672c\u90fd\u5728\u5185\u6838\u91cc\u652f\u6301\u4e86\u8fd9\u4e2a\u7279\u6027\u3002 TCP KeepAlive \u7684\u57fa\u672c\u539f\u7406\u662f\uff0c\u9694\u4e00\u6bb5\u65f6\u95f4\u7ed9\u8fde\u63a5\u5bf9\u7aef\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u5305\uff0c\u5982\u679c\u6536\u5230\u5bf9\u65b9\u56de\u5e94\u7684 ACK\uff0c\u5219\u8ba4\u4e3a\u8fde\u63a5\u8fd8\u662f\u5b58\u6d3b\u7684\uff0c\u5728\u8d85\u8fc7\u4e00\u5b9a\u91cd\u8bd5\u6b21\u6570\u4e4b\u540e\u8fd8\u662f\u6ca1\u6709\u6536\u5230\u5bf9\u65b9\u7684\u56de\u5e94\uff0c\u5219\u4e22\u5f03\u8be5 TCP \u8fde\u63a5\u3002 TCP-Keepalive-HOWTO \u6709\u5bf9 TCP KeepAlive \u7279\u6027\u7684\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u3002\u8fd9\u91cc\u4e3b\u8981\u8bf4\u4e00\u4e0b\uff0cTCP KeepAlive \u7684\u5c40\u9650\u3002\u9996\u5148 TCP KeepAlive \u76d1\u6d4b\u7684\u65b9\u5f0f\u662f\u53d1\u9001\u4e00\u4e2a probe \u5305\uff0c\u4f1a\u7ed9\u7f51\u7edc\u5e26\u6765\u989d\u5916\u7684\u6d41\u91cf\uff0c\u53e6\u5916 TCP KeepAlive \u53ea\u80fd\u5728\u5185\u6838\u5c42\u7ea7\u76d1\u6d4b\u8fde\u63a5\u7684\u5b58\u6d3b\u4e0e\u5426\uff0c\u800c\u8fde\u63a5\u7684\u5b58\u6d3b\u4e0d\u4e00\u5b9a\u4ee3\u8868\u670d\u52a1\u7684\u53ef\u7528\u3002\u4f8b\u5982\u5f53\u4e00\u4e2a\u670d\u52a1\u5668 CPU \u8fdb\u7a0b\u670d\u52a1\u5668\u5360\u7528\u8fbe\u5230 100%\uff0c\u5df2\u7ecf\u5361\u6b7b\u4e0d\u80fd\u54cd\u5e94\u8bf7\u6c42\u4e86\uff0c\u6b64\u65f6 TCP KeepAlive \u4f9d\u7136\u4f1a\u8ba4\u4e3a\u8fde\u63a5\u662f\u5b58\u6d3b\u7684\u3002\u56e0\u6b64 TCP KeepAlive \u5bf9\u4e8e\u5e94\u7528\u5c42\u7a0b\u5e8f\u7684\u4ef7\u503c\u662f\u76f8\u5bf9\u8f83\u5c0f\u7684\u3002\u9700\u8981\u505a\u8fde\u63a5\u4fdd\u6d3b\u7684\u5e94\u7528\u5c42\u7a0b\u5e8f\uff0c\u4f8b\u5982 QQ\uff0c\u5f80\u5f80\u4f1a\u5728\u5e94\u7528\u5c42\u5b9e\u73b0\u81ea\u5df1\u7684\u5fc3\u8df3\u529f\u80fd\u3002","title":"TCP KeepAlive"},{"location":"network/TCP/#_2","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\uff1a\u81ea\u9876\u5411\u4e0b\u65b9\u6cd5 TCP\u4e09\u6b21\u63e1\u624b\u53ca\u56db\u6b21\u6325\u624b\u8be6\u7ec6\u56fe\u89e3 TCP\u534f\u8bae\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\u5206\u6790 TCP\u534f\u8bae\u4e2d\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b(\u56fe\u89e3) \u767e\u5ea6\u767e\u79d1\uff1aSYN\u653b\u51fb TCP-Keepalive-HOWTO TCP \u7684\u7279\u6027 \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"network/session/","text":"\u8fd9\u4e00\u8282\u4f1a\u8bb2\u8bb2\u5982\u4f55\u6a21\u62df\u767b\u9646\u3002 \u573a\u666f \u6a21\u62df\u767b\u9646\u662f\u722c\u866b\u4e2d\u975e\u5e38\u5e38\u89c1\u7684\u573a\u666f\uff0c\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u6709\u4e9b\u662f\u6253\u5f00\u5c31\u770b\u5f97\u5230\u7684\uff0c\u6bd4\u5982\u817e\u8baf\u65b0\u95fb\u3001\u62c9\u52fe\u7f51\u7b49\uff0c\u6709\u4e9b\u662f\u9700\u8981\u767b\u5f55\u624d\u53ef\u89c1\u7684\uff0c\u6bd4\u5982\u4e0a\u4e00\u8282\u8bf4\u7684\u77e5\u4e4e\u9996\u9875\uff0c\u70b9\u8bc4\u8bc4\u8bba\u7ffb\u9875\u7b49\u7b49\u3002\u6240\u4ee5\u6a21\u62df\u767b\u5f55\u65f6\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u6570\u636e\u83b7\u53d6\u624b\u6bb5\u3002 \u6a21\u62df\u767b\u9646\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u624b\u52a8 \u81ea\u52a8 \u624b\u52a8 \u6bd4\u5982\u6a21\u62df\u767b\u9646\u77e5\u4e4e\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6253\u5f00\u77e5\u4e4e\u9996\u9875\uff0c\u7136\u540e\u8f93\u5165\u6211\u4eec\u81ea\u5df1\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u5c06\u5176\u4e2d\u7684cookies\u590d\u5236\u4e0b\u6765\uff0c\u5b8c\u6210\u4e1a\u52a1\u64cd\u4f5c\u3002 \u6211\u4eec\u628acookies\u8fd0\u7528\u5728\u722c\u866b\u4e2d\u5c31\u53ef\u4ee5\u6293\u53d6\u77e5\u4e4e\u7f51\u7ad9\u5bf9\u201c\u6211\u201d\u8fd9\u4e2a\u7528\u6237\u6240\u63a8\u9001\u7684\u4e2a\u6027\u4fe1\u606f\uff0c\u5728requests\u4e2d\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5e94\u7528\u3002 >>> url = 'http://httpbin.org/cookies' >>> cookies = dict(cookies_are='working') >>> r = requests.get(url, cookies=cookies) >>> r.text '{\"cookies\": {\"cookies_are\": \"working\"}}' \u4f8b\u5b50\uff1a import requests cookies = { 'BAIDUID': '7B7D88053B10EB435DB1E212DBF145BF:FG=1', 'BIDUPSID': '7B7D88053B10EB435DB1E212DBF145BF', 'PSTM': '1551098874', 'BDRCVFR[pNjdDcNFITf]': 'mk3SLVN4HKm', 'delPer': '0', 'BD_CK_SAM': '1', 'BD_UPN': '123253', 'BD_HOME': '1', 'locale': 'zh', 'H_PS_PSSID': '1444_21092_18559_26350_28415', 'BDRCVFR[feWj1Vr5u3D]': 'I67x6TjHwwYf0', 'PSINO': '1', 'H_PS_645EC': 'b710sJmEk7esA9h2dxosAL9oFPrYrIk%2FdoimlGSz7DCKfuSVp27CVuygqGuvEqwhznOf', } headers = { 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7', } params = ( ('wd', 'python'), ) response = requests.get('https://www.baidu.com/s', headers=headers, params=params, cookies=cookies) cookies\u53ef\u4ee5\u5355\u72ec\u62c6\u51fa\u6765\u5f53\u505a\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u53ef\u4ee5\u5b58\u653e\u5728headers\u4e2d\uff0c\u5982\u4e0b\uff1a import requests url = \"https://www.baidu.com/s\" querystring = {\"wd\":\"python\"} headers = { 'Connection': \"keep-alive\", 'Upgrade-Insecure-Requests': \"1\", 'User-Agent': \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\", 'Accept': \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\", 'Accept-Encoding': \"gzip, deflate, br\", 'Accept-Language': \"zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7\", 'Cookie': \"BAIDUID=7B7D88053B10EB435DB1E212DBF145BF:FG=1; BIDUPSID=7B7D88053B10EB435DB1E212DBF145BF; PSTM=1551098874; BDRCVFR[pNjdDcNFITf]=mk3SLVN4HKm; delPer=0; BD_CK_SAM=1; BD_UPN=123253; BD_HOME=1; locale=zh; H_PS_PSSID=1444_21092_18559_26350_28415; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; PSINO=1; H_PS_645EC=b710sJmEk7esA9h2dxosAL9oFPrYrIk%2FdoimlGSz7DCKfuSVp27CVuygqGuvEqwhznOf\", 'cache-control': \"no-cache\", } response = requests.request(\"GET\", url, headers=headers, params=querystring) print(response.text) \u5c0f\u63d0\u793a\uff0c\u4f7f\u7528curl\u590d\u5236\u975e\u5e38\u65b9\u4fbf\uff0ccurl\u5185\u5bb9\u540e\u9762\u4f1a\u8bb2\u5230\u3002 \u53ef\u4ee5\u770b\u5230\u624b\u52a8\u590d\u5236\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6548\u7387\u4f4e\uff0c\u800c\u4e14\u4e0d\u80fd\u81ea\u52a8\u767b\u5f55\uff0c\u5373cookies\u5931\u6548\uff0c\u8fd8\u9700\u8981\u4eba\u624b\u52a8\u518d\u53bb\u6d4f\u89c8\u5668\u4e2d\u590d\u5236\uff0c\u4e0d\u9002\u5408\u722c\u866b\u573a\u666f\u3002 \u81ea\u52a8 \u8fd9\u6b21\u6211\u4eec\u8bf4\u4e00\u4e2a\u7a0d\u5fae\u7b80\u5355\u70b9\u7684\u7f51\u7ad9\uff1aGithub\u7684\u6a21\u62df\u767b\u9646\u3002\u6587\u7ae0\u6211\u53ea\u7231\u53bb\u54ea\u5199\u8fc7\uff0c\u5b8c\u6210\u5185\u5bb9\u53ef\u4ee5\u5230\u8fd9\u91cc\u6765\u770b\uff1a \u4f7f\u7528Selenium\u4e0eRequests\u6a21\u62df\u767b\u9646 \u6838\u5fc3\u4ee3\u7801\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- import re import requests headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', 'Connection': 'keep-alive', 'Host': 'github.com', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36' } s = requests.session() s.headers.update(headers) def get_token(): url = 'https://github.com/login' response = s.get(url, timeout=10) pat = 'name=\\\"authenticity_token\\\" value=\\\"(.*?)\\\"' return re.findall(pat, response.text)[0] def login(authenticity_token, account, password): payload = { 'commit': 'Sign in', 'utf8': '\\u2713', 'authenticity_token': authenticity_token, 'login': account, 'password': password, } url = 'https://github.com/session' response = s.post(url, data=payload) print(response.text) # do whatever you want if __name__ == '__main__': account, password = '', '' authenticity_token = get_token() login(authenticity_token, account, password) \u6709\u51e0\u70b9\u8bf4\u4e0b\uff1a github\u9996\u9875\u6709\u4e00\u4e2aauthenticity_token\uff0c\u9700\u8981\u8fd9\u4e2atoken\u7ef4\u6301\u767b\u5f55\u72b6\u6001\u3002 github\u7684\u5bc6\u7801\u662f\u660e\u6587\uff0c\u8fd9\u662f\u975e\u5e38\u5c11\u89c1\u7684\uff0c\u5927\u591a\u6570\u7f51\u7ad9\u90fd\u662f\u6709\u52a0\u5bc6\u7684\u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u5f00\u53d1\u8005\u5de5\u5177\u6253\u65ad\u70b9\u6765\u89e3\u51b3\u3002 github\u7684\u767b\u5f55\u662f\u4e0d\u9700\u8981\u8f93\u5165\u9a8c\u8bc1\u7801\u7684\uff0c\u5b9e\u5728\u662f\u592a\u5c11\u89c1\u4e86\u3002\u56fd\u5185\u7684\u57fa\u672c\u4e0a\u90fd\u9700\u8981\u9a8c\u8bc1\u7801\u7684\uff0c\u9a8c\u8bc1\u7801\u4e5f\u662f\u722c\u866b\u4e2d\u5f88\u4ee4\u4eba\u5934\u75bc\u7684\u4e00\u5757\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e24\u79cd\u65b9\u6cd5\uff1a\u673a\u5668\u5b66\u4e60\u3001\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u6a21\u578b\uff1b\u63a5\u7b2c\u4e09\u65b9\u6253\u7801\u5e73\u53f0\u3002\u8fd9\u4e2a\u6211\u4eec\u4ee5\u540e\u518d\u8bb2\u3002 \u5b9e\u8df5 \u5c1d\u8bd5\u5b8c\u6210\u7f8e\u56e2\u767b\u5f55\u3002 \u7f51\u5740\uff1a \u7f8e\u56e2\u7f51 \u6709\u51e0\u4e2a\u91cd\u70b9\u53c2\u6570\u9700\u8981\u89e3\u51b3\uff1a password fingerprint csrf _token \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u5b9e\u6218\uff1a\u6a21\u62df\u767b\u9646"},{"location":"network/session/#_1","text":"\u6a21\u62df\u767b\u9646\u662f\u722c\u866b\u4e2d\u975e\u5e38\u5e38\u89c1\u7684\u573a\u666f\uff0c\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u6709\u4e9b\u662f\u6253\u5f00\u5c31\u770b\u5f97\u5230\u7684\uff0c\u6bd4\u5982\u817e\u8baf\u65b0\u95fb\u3001\u62c9\u52fe\u7f51\u7b49\uff0c\u6709\u4e9b\u662f\u9700\u8981\u767b\u5f55\u624d\u53ef\u89c1\u7684\uff0c\u6bd4\u5982\u4e0a\u4e00\u8282\u8bf4\u7684\u77e5\u4e4e\u9996\u9875\uff0c\u70b9\u8bc4\u8bc4\u8bba\u7ffb\u9875\u7b49\u7b49\u3002\u6240\u4ee5\u6a21\u62df\u767b\u5f55\u65f6\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u6570\u636e\u83b7\u53d6\u624b\u6bb5\u3002 \u6a21\u62df\u767b\u9646\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u624b\u52a8 \u81ea\u52a8","title":"\u573a\u666f"},{"location":"network/session/#_2","text":"\u6bd4\u5982\u6a21\u62df\u767b\u9646\u77e5\u4e4e\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6253\u5f00\u77e5\u4e4e\u9996\u9875\uff0c\u7136\u540e\u8f93\u5165\u6211\u4eec\u81ea\u5df1\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u5c06\u5176\u4e2d\u7684cookies\u590d\u5236\u4e0b\u6765\uff0c\u5b8c\u6210\u4e1a\u52a1\u64cd\u4f5c\u3002 \u6211\u4eec\u628acookies\u8fd0\u7528\u5728\u722c\u866b\u4e2d\u5c31\u53ef\u4ee5\u6293\u53d6\u77e5\u4e4e\u7f51\u7ad9\u5bf9\u201c\u6211\u201d\u8fd9\u4e2a\u7528\u6237\u6240\u63a8\u9001\u7684\u4e2a\u6027\u4fe1\u606f\uff0c\u5728requests\u4e2d\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5e94\u7528\u3002 >>> url = 'http://httpbin.org/cookies' >>> cookies = dict(cookies_are='working') >>> r = requests.get(url, cookies=cookies) >>> r.text '{\"cookies\": {\"cookies_are\": \"working\"}}' \u4f8b\u5b50\uff1a import requests cookies = { 'BAIDUID': '7B7D88053B10EB435DB1E212DBF145BF:FG=1', 'BIDUPSID': '7B7D88053B10EB435DB1E212DBF145BF', 'PSTM': '1551098874', 'BDRCVFR[pNjdDcNFITf]': 'mk3SLVN4HKm', 'delPer': '0', 'BD_CK_SAM': '1', 'BD_UPN': '123253', 'BD_HOME': '1', 'locale': 'zh', 'H_PS_PSSID': '1444_21092_18559_26350_28415', 'BDRCVFR[feWj1Vr5u3D]': 'I67x6TjHwwYf0', 'PSINO': '1', 'H_PS_645EC': 'b710sJmEk7esA9h2dxosAL9oFPrYrIk%2FdoimlGSz7DCKfuSVp27CVuygqGuvEqwhznOf', } headers = { 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7', } params = ( ('wd', 'python'), ) response = requests.get('https://www.baidu.com/s', headers=headers, params=params, cookies=cookies) cookies\u53ef\u4ee5\u5355\u72ec\u62c6\u51fa\u6765\u5f53\u505a\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u53ef\u4ee5\u5b58\u653e\u5728headers\u4e2d\uff0c\u5982\u4e0b\uff1a import requests url = \"https://www.baidu.com/s\" querystring = {\"wd\":\"python\"} headers = { 'Connection': \"keep-alive\", 'Upgrade-Insecure-Requests': \"1\", 'User-Agent': \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\", 'Accept': \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\", 'Accept-Encoding': \"gzip, deflate, br\", 'Accept-Language': \"zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7\", 'Cookie': \"BAIDUID=7B7D88053B10EB435DB1E212DBF145BF:FG=1; BIDUPSID=7B7D88053B10EB435DB1E212DBF145BF; PSTM=1551098874; BDRCVFR[pNjdDcNFITf]=mk3SLVN4HKm; delPer=0; BD_CK_SAM=1; BD_UPN=123253; BD_HOME=1; locale=zh; H_PS_PSSID=1444_21092_18559_26350_28415; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; PSINO=1; H_PS_645EC=b710sJmEk7esA9h2dxosAL9oFPrYrIk%2FdoimlGSz7DCKfuSVp27CVuygqGuvEqwhznOf\", 'cache-control': \"no-cache\", } response = requests.request(\"GET\", url, headers=headers, params=querystring) print(response.text) \u5c0f\u63d0\u793a\uff0c\u4f7f\u7528curl\u590d\u5236\u975e\u5e38\u65b9\u4fbf\uff0ccurl\u5185\u5bb9\u540e\u9762\u4f1a\u8bb2\u5230\u3002 \u53ef\u4ee5\u770b\u5230\u624b\u52a8\u590d\u5236\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6548\u7387\u4f4e\uff0c\u800c\u4e14\u4e0d\u80fd\u81ea\u52a8\u767b\u5f55\uff0c\u5373cookies\u5931\u6548\uff0c\u8fd8\u9700\u8981\u4eba\u624b\u52a8\u518d\u53bb\u6d4f\u89c8\u5668\u4e2d\u590d\u5236\uff0c\u4e0d\u9002\u5408\u722c\u866b\u573a\u666f\u3002","title":"\u624b\u52a8"},{"location":"network/session/#_3","text":"\u8fd9\u6b21\u6211\u4eec\u8bf4\u4e00\u4e2a\u7a0d\u5fae\u7b80\u5355\u70b9\u7684\u7f51\u7ad9\uff1aGithub\u7684\u6a21\u62df\u767b\u9646\u3002\u6587\u7ae0\u6211\u53ea\u7231\u53bb\u54ea\u5199\u8fc7\uff0c\u5b8c\u6210\u5185\u5bb9\u53ef\u4ee5\u5230\u8fd9\u91cc\u6765\u770b\uff1a \u4f7f\u7528Selenium\u4e0eRequests\u6a21\u62df\u767b\u9646 \u6838\u5fc3\u4ee3\u7801\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- import re import requests headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', 'Connection': 'keep-alive', 'Host': 'github.com', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36' } s = requests.session() s.headers.update(headers) def get_token(): url = 'https://github.com/login' response = s.get(url, timeout=10) pat = 'name=\\\"authenticity_token\\\" value=\\\"(.*?)\\\"' return re.findall(pat, response.text)[0] def login(authenticity_token, account, password): payload = { 'commit': 'Sign in', 'utf8': '\\u2713', 'authenticity_token': authenticity_token, 'login': account, 'password': password, } url = 'https://github.com/session' response = s.post(url, data=payload) print(response.text) # do whatever you want if __name__ == '__main__': account, password = '', '' authenticity_token = get_token() login(authenticity_token, account, password) \u6709\u51e0\u70b9\u8bf4\u4e0b\uff1a github\u9996\u9875\u6709\u4e00\u4e2aauthenticity_token\uff0c\u9700\u8981\u8fd9\u4e2atoken\u7ef4\u6301\u767b\u5f55\u72b6\u6001\u3002 github\u7684\u5bc6\u7801\u662f\u660e\u6587\uff0c\u8fd9\u662f\u975e\u5e38\u5c11\u89c1\u7684\uff0c\u5927\u591a\u6570\u7f51\u7ad9\u90fd\u662f\u6709\u52a0\u5bc6\u7684\u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u5f00\u53d1\u8005\u5de5\u5177\u6253\u65ad\u70b9\u6765\u89e3\u51b3\u3002 github\u7684\u767b\u5f55\u662f\u4e0d\u9700\u8981\u8f93\u5165\u9a8c\u8bc1\u7801\u7684\uff0c\u5b9e\u5728\u662f\u592a\u5c11\u89c1\u4e86\u3002\u56fd\u5185\u7684\u57fa\u672c\u4e0a\u90fd\u9700\u8981\u9a8c\u8bc1\u7801\u7684\uff0c\u9a8c\u8bc1\u7801\u4e5f\u662f\u722c\u866b\u4e2d\u5f88\u4ee4\u4eba\u5934\u75bc\u7684\u4e00\u5757\uff0c\u5927\u4f53\u4e0a\u5206\u4e3a\u4e24\u79cd\u65b9\u6cd5\uff1a\u673a\u5668\u5b66\u4e60\u3001\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u6a21\u578b\uff1b\u63a5\u7b2c\u4e09\u65b9\u6253\u7801\u5e73\u53f0\u3002\u8fd9\u4e2a\u6211\u4eec\u4ee5\u540e\u518d\u8bb2\u3002","title":"\u81ea\u52a8"},{"location":"network/session/#_4","text":"\u5c1d\u8bd5\u5b8c\u6210\u7f8e\u56e2\u767b\u5f55\u3002 \u7f51\u5740\uff1a \u7f8e\u56e2\u7f51 \u6709\u51e0\u4e2a\u91cd\u70b9\u53c2\u6570\u9700\u8981\u89e3\u51b3\uff1a password fingerprint csrf _token \u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7 \u5728\u6b64\u4ea4\u6d41 \u3002","title":"\u5b9e\u8df5"},{"location":"requests/basic_useage/","text":"Requests\u57fa\u7840\u4f7f\u7528 \u5728google\u4e2d\u641c\u7d22requests\u7684\u7ed3\u679c\uff1a \u6709\u4e2d\u6587\u4e5f\u6709\u82f1\u6587\u6587\u6863\uff0c\u5982\u679c\u82f1\u6587\u8fd8OK\u5c31\u53ef\u4ee5\u53bb\u64b8\u82f1\u6587\u6587\u6863\u3002\u4e2d\u6587\u6587\u6863\u5730\u5740\uff1a Requests: \u8ba9 HTTP \u670d\u52a1\u4eba\u7c7b requests\u4f5c\u4e3aPython\u6700\u51fa\u540d\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u5404\u65b9\u9762\u7684\u6559\u7a0b\u5df2\u7ecf\u975e\u5e38\u5b8c\u5584\uff0c\u5c24\u5176\u662f\u57fa\u7840\u7528\u6cd5\u3002 \u5b89\u88c5 \u6700\u7b80\u5355\u7684\u5f53\u7136\u662f\u4f7f\u7528pip\u5b89\u88c5\uff1a $ pip install requests \u5982\u679c\u4f60\u7684Python3\u7248\u672c\u5bf9\u5e94\u7684pip\u8f6f\u94fe\u662fpip3\uff0c\u8bb0\u5f97\u66f4\u6362\u4e3apip3\u3002 \u5982\u679c\u5b89\u88c5\u6709\u95ee\u9898\uff0c\u53c2\u8003\uff1a \u5b89\u88c5 Requests \u53d1\u9001\u8bf7\u6c42 >>> import requests >>> r = requests.get('https://api.github.com/events') >>> r = requests.post('http://httpbin.org/post', data = {'key':'value'}) >>> r = requests.put('http://httpbin.org/put', data = {'key':'value'}) >>> r = requests.delete('http://httpbin.org/delete') >>> r = requests.head('http://httpbin.org/get') >>> r = requests.options('http://httpbin.org/get') \u53c2\u89c1\uff1a \u5feb\u901f\u4e0a\u624b \u53ef\u4ee5\u770b\u5230\u4f7f\u7528requests\u53d1\u9001\u8bf7\u6c42\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528urllib\u7684\u4ee3\u7801 import urllib.request req = urllib.request.Request('http://www.example.com/') req.add_header('Referer', 'http://www.python.org/') r = urllib.request.urlopen(req) result = f.read().decode('utf-8') \u5173\u4e8erequests\u4e0eurllib\uff0c\u5f3a\u70c8\u5efa\u8bae\u662f\u9009\u62e9requests\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u56de\u7b54 What are the differences between the urllib, urllib2, and requests module? \u81f3\u4e8e\u5176\u4ed6\u7684\u53c2\u89c1\u7684\u6dfb\u52a0headers\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86\uff0c\u770b\u6587\u6863\u5373\u53ef\u3002 \u8fd9\u4e00\u8282\u4efb\u52a1\u5c31\u662f\u628a \u5feb\u901f\u4e0a\u624b \u7684\u5185\u5bb9\u770b\u5b8c\uff0c\u5e76\u5b8c\u6210\u4e0b\u9762\u7684\u4f5c\u4e1a\u3002 \u4f5c\u4e1a \u7ed9\u4f60\u4e09\u4e2a\u7f51\u5740\uff0c\u8bd5\u8bd5\u4f7f\u7528requests\u6293\u53d6html https://www.baidu.com https://www.toutiao.com https://www.zhihu.com https://www.google.com \u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e9b\u5947\u602a\u7684\u73b0\u8c61\uff0c\u522b\u7740\u6025\uff0c\u4e0b\u4e00\u8282\u4f1a\u7ee7\u7eed\u8bb2\u3002","title":"Requests\u57fa\u7840\u4f7f\u7528"},{"location":"requests/basic_useage/#requests","text":"\u5728google\u4e2d\u641c\u7d22requests\u7684\u7ed3\u679c\uff1a \u6709\u4e2d\u6587\u4e5f\u6709\u82f1\u6587\u6587\u6863\uff0c\u5982\u679c\u82f1\u6587\u8fd8OK\u5c31\u53ef\u4ee5\u53bb\u64b8\u82f1\u6587\u6587\u6863\u3002\u4e2d\u6587\u6587\u6863\u5730\u5740\uff1a Requests: \u8ba9 HTTP \u670d\u52a1\u4eba\u7c7b requests\u4f5c\u4e3aPython\u6700\u51fa\u540d\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u5404\u65b9\u9762\u7684\u6559\u7a0b\u5df2\u7ecf\u975e\u5e38\u5b8c\u5584\uff0c\u5c24\u5176\u662f\u57fa\u7840\u7528\u6cd5\u3002","title":"Requests\u57fa\u7840\u4f7f\u7528"},{"location":"requests/basic_useage/#_1","text":"\u6700\u7b80\u5355\u7684\u5f53\u7136\u662f\u4f7f\u7528pip\u5b89\u88c5\uff1a $ pip install requests \u5982\u679c\u4f60\u7684Python3\u7248\u672c\u5bf9\u5e94\u7684pip\u8f6f\u94fe\u662fpip3\uff0c\u8bb0\u5f97\u66f4\u6362\u4e3apip3\u3002 \u5982\u679c\u5b89\u88c5\u6709\u95ee\u9898\uff0c\u53c2\u8003\uff1a \u5b89\u88c5 Requests","title":"\u5b89\u88c5"},{"location":"requests/basic_useage/#_2","text":">>> import requests >>> r = requests.get('https://api.github.com/events') >>> r = requests.post('http://httpbin.org/post', data = {'key':'value'}) >>> r = requests.put('http://httpbin.org/put', data = {'key':'value'}) >>> r = requests.delete('http://httpbin.org/delete') >>> r = requests.head('http://httpbin.org/get') >>> r = requests.options('http://httpbin.org/get') \u53c2\u89c1\uff1a \u5feb\u901f\u4e0a\u624b \u53ef\u4ee5\u770b\u5230\u4f7f\u7528requests\u53d1\u9001\u8bf7\u6c42\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528urllib\u7684\u4ee3\u7801 import urllib.request req = urllib.request.Request('http://www.example.com/') req.add_header('Referer', 'http://www.python.org/') r = urllib.request.urlopen(req) result = f.read().decode('utf-8') \u5173\u4e8erequests\u4e0eurllib\uff0c\u5f3a\u70c8\u5efa\u8bae\u662f\u9009\u62e9requests\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u56de\u7b54 What are the differences between the urllib, urllib2, and requests module? \u81f3\u4e8e\u5176\u4ed6\u7684\u53c2\u89c1\u7684\u6dfb\u52a0headers\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86\uff0c\u770b\u6587\u6863\u5373\u53ef\u3002 \u8fd9\u4e00\u8282\u4efb\u52a1\u5c31\u662f\u628a \u5feb\u901f\u4e0a\u624b \u7684\u5185\u5bb9\u770b\u5b8c\uff0c\u5e76\u5b8c\u6210\u4e0b\u9762\u7684\u4f5c\u4e1a\u3002","title":"\u53d1\u9001\u8bf7\u6c42"},{"location":"requests/basic_useage/#_3","text":"\u7ed9\u4f60\u4e09\u4e2a\u7f51\u5740\uff0c\u8bd5\u8bd5\u4f7f\u7528requests\u6293\u53d6html https://www.baidu.com https://www.toutiao.com https://www.zhihu.com https://www.google.com \u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e9b\u5947\u602a\u7684\u73b0\u8c61\uff0c\u522b\u7740\u6025\uff0c\u4e0b\u4e00\u8282\u4f1a\u7ee7\u7eed\u8bb2\u3002","title":"\u4f5c\u4e1a"},{"location":"requests/request_source_code/","text":"Requests\u6e90\u7801\u5206\u6790 \u8fd9\u4e00\u8282\u6211\u4eec\u6765\u770b\u770brequests\u662f\u5982\u4f55\u53d1\u9001\u4e00\u4e2arequest\u7684\uff0c\u8fd9\u4e00\u8282\u5185\u5bb9\u53ef\u80fd\u6bd4\u8f83\u591a\uff0c\u6709\u5f88\u591a\u5e95\u5c42\u4ee3\u7801\uff0c\u6211\u81ea\u5df1\u4e5f\u770b\u7684\u5934\u75bc\uff0c\u5efa\u8bae\u9605\u8bfb\u524d\u5148\u559d\u74f6\u9178\u5976\u4ee5\u4fdd\u6301\u8f7b\u677e\u7684\u5fc3\u60c5\u3002\u5982\u679c\u4f60\u51c6\u5907\u597d\u4e86\uff0c\u8bf7\u5f80\u4e0b\u770b\u3002 \u6211\u4eec\u5728Pycharm\u4e2d\u6309\u4f4fwin\u70b9\u51fbget\uff0c\u4f1a\u6765\u5230get\u65b9\u6cd5\u7684\u6e90\u7801\uff1a def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response <Response>` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) \u53d1\u73b0\u8c03\u7528\u4e86request\u65b9\u6cd5\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b def request(method, url, **kwargs): \"\"\"Constructs and sends a :class:`Request <Request>`. :param method: method for the new :class:`Request` object. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`. :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`. :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`. :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload. ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')`` or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers to add for the file. :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How many seconds to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy. :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to ``True``. :param stream: (optional) if ``False``, the response content will be immediately downloaded. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :return: :class:`Response <Response>` object :rtype: requests.Response Usage:: >>> import requests >>> req = requests.request('GET', 'https://httpbin.org/get') <Response [200]> \"\"\" # By using the 'with' statement we are sure the session is closed, thus we # avoid leaving sockets open which can trigger a ResourceWarning in some # cases, and look like a memory leak in others. with sessions.Session() as session: return session.request(method=method, url=url, **kwargs) \u8fd9\u91cc\u5c31\u5bf9\u6240\u6709requests\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u505a\u4e86\u4e00\u4e00\u89e3\u91ca\uff0c\u5728\u516c\u4f17\u53f7\u6587\u7ae0\u6709\u7ffb\u8bd1\uff1a \u5927\u4f6c\u7684\u8bdd\uff08\u4e00\uff09 \u3002\u770b\u5230\uff0c\u8fd9\u91cc\u662f\u542f\u7528\u4e86\u4e00\u4e2asession(\u5728 HTTP\u534f\u8bae \u4e2d\u8bb2\u7684\u4f1a\u8bdd)\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\uff1a def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None): \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it. Returns :class:`Response <Response>` object. :param method: method for the new :class:`Request` object. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`. :param json: (optional) json to send in the body of the :class:`Request`. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`. :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`. :param files: (optional) Dictionary of ``'filename': file-like-objects`` for multipart encoding upload. :param auth: (optional) Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple :param allow_redirects: (optional) Set to True by default. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy. :param stream: (optional) whether to immediately download the response content. Defaults to ``False``. :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to ``True``. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :rtype: requests.Response \"\"\" # Create the Request. req = Request( method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks, ) prep = self.prepare_request(req) proxies = proxies or {} settings = self.merge_environment_settings( prep.url, proxies, stream, verify, cert ) # Send the request. send_kwargs = { 'timeout': timeout, 'allow_redirects': allow_redirects, } send_kwargs.update(settings) resp = self.send(prep, **send_kwargs) return resp \u628a\u6240\u6709\u7684\u53c2\u6570\u52a0\u8d77\u6765\uff0c\u521b\u5efa\u4e86\u4e00\u4e2aRequest\uff0c\u53d1\u9001\u8fd9\u4e2aRequest\uff0c\u8c03\u7528\u4e86 self.send \u65b9\u6cd5 def send(self, request, **kwargs): \"\"\"Send a given PreparedRequest. :rtype: requests.Response \"\"\" # Set defaults that the hooks can utilize to ensure they always have # the correct parameters to reproduce the previous request. kwargs.setdefault('stream', self.stream) kwargs.setdefault('verify', self.verify) kwargs.setdefault('cert', self.cert) kwargs.setdefault('proxies', self.proxies) # It's possible that users might accidentally send a Request object. # Guard against that specific failure case. if isinstance(request, Request): raise ValueError('You can only send PreparedRequests.') # Set up variables needed for resolve_redirects and dispatching of hooks allow_redirects = kwargs.pop('allow_redirects', True) stream = kwargs.get('stream') hooks = request.hooks # Get the appropriate adapter to use adapter = self.get_adapter(url=request.url) # Start time (approximately) of the request start = preferred_clock() # Send the request r = adapter.send(request, **kwargs) # Total elapsed time of the request (approximately) elapsed = preferred_clock() - start r.elapsed = timedelta(seconds=elapsed) # Response manipulation hooks r = dispatch_hook('response', hooks, r, **kwargs) # Persist cookies if r.history: # If the hooks create history then we want those cookies too for resp in r.history: extract_cookies_to_jar(self.cookies, resp.request, resp.raw) extract_cookies_to_jar(self.cookies, request, r.raw) # Redirect resolving generator. gen = self.resolve_redirects(r, request, **kwargs) # Resolve redirects if allowed. history = [resp for resp in gen] if allow_redirects else [] # Shuffle things around if there's history. if history: # Insert the first (original) request at the start history.insert(0, r) # Get the last request made r = history.pop() r.history = history # If redirects aren't being followed, store the response on the Request for Response.next(). if not allow_redirects: try: r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs)) except StopIteration: pass if not stream: r.content return r \u53d1\u9001request\u662f\u8c03\u7528 r = adapter.send(request, **kwargs) \u8fd9\u4e00\u884c\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\uff0c def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None): \"\"\"Sends PreparedRequest object. Returns Response object. :param request: The :class:`PreparedRequest <PreparedRequest>` being sent. :param stream: (optional) Whether to stream the request content. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple or urllib3 Timeout object :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use :param cert: (optional) Any user-provided SSL certificate to be trusted. :param proxies: (optional) The proxies dictionary to apply to the request. :rtype: requests.Response \"\"\" try: conn = self.get_connection(request.url, proxies) except LocationValueError as e: raise InvalidURL(e, request=request) self.cert_verify(conn, request.url, verify, cert) url = self.request_url(request, proxies) self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies) chunked = not (request.body is None or 'Content-Length' in request.headers) if isinstance(timeout, tuple): try: connect, read = timeout timeout = TimeoutSauce(connect=connect, read=read) except ValueError as e: # this may raise a string formatting error. err = (\"Invalid timeout {}. Pass a (connect, read) \" \"timeout tuple, or a single float to set \" \"both timeouts to the same value\".format(timeout)) raise ValueError(err) elif isinstance(timeout, TimeoutSauce): pass else: timeout = TimeoutSauce(connect=timeout, read=timeout) try: if not chunked: resp = conn.urlopen( method=request.method, url=url, body=request.body, headers=request.headers, redirect=False, assert_same_host=False, preload_content=False, decode_content=False, retries=self.max_retries, timeout=timeout ) # Send the request. else: if hasattr(conn, 'proxy_pool'): conn = conn.proxy_pool low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT) try: low_conn.putrequest(request.method, url, skip_accept_encoding=True) for header, value in request.headers.items(): low_conn.putheader(header, value) low_conn.endheaders() for i in request.body: low_conn.send(hex(len(i))[2:].encode('utf-8')) low_conn.send(b'\\r\\n') low_conn.send(i) low_conn.send(b'\\r\\n') low_conn.send(b'0\\r\\n\\r\\n') # Receive the response from the server try: # For Python 2.7, use buffering of HTTP responses r = low_conn.getresponse(buffering=True) except TypeError: # For compatibility with Python 3.3+ r = low_conn.getresponse() resp = HTTPResponse.from_httplib( r, pool=conn, connection=low_conn, preload_content=False, decode_content=False ) except: # If we hit any problems here, clean up the connection. # Then, reraise so that we can handle the actual exception. low_conn.close() raise except (ProtocolError, socket.error) as err: raise ConnectionError(err, request=request) except MaxRetryError as e: if isinstance(e.reason, ConnectTimeoutError): # TODO: Remove this in 3.0.0: see #2811 if not isinstance(e.reason, NewConnectionError): raise ConnectTimeout(e, request=request) if isinstance(e.reason, ResponseError): raise RetryError(e, request=request) if isinstance(e.reason, _ProxyError): raise ProxyError(e, request=request) if isinstance(e.reason, _SSLError): # This branch is for urllib3 v1.22 and later. raise SSLError(e, request=request) raise ConnectionError(e, request=request) except ClosedPoolError as e: raise ConnectionError(e, request=request) except _ProxyError as e: raise ProxyError(e) except (_SSLError, _HTTPError) as e: if isinstance(e, _SSLError): # This branch is for urllib3 versions earlier than v1.22 raise SSLError(e, request=request) elif isinstance(e, ReadTimeoutError): raise ReadTimeout(e, request=request) else: raise return self.build_response(request, resp) \u7ee7\u7eed\u770b conn = self.get_connection(request.url, proxies) \u8fd9\u4e00\u6bb5\uff0c\u518d\u4e00\u5c42\u5c42\u5f80\u4e0b\u770b\uff0c\u770b\u5230\u8fd9\u91cc pool_classes_by_scheme = { 'http': HTTPConnectionPool, 'https': HTTPSConnectionPool, } \u53d1\u73b0\u8fd9\u91cc\u6709\u4e24\u4e2a\u8fde\u63a5\u6c60\uff0c\u4e00\u4e2a\u662f\u5904\u7406HTTP\u7684\u3001\u4e00\u4e2a\u662f\u5904\u7406HTTPS\u7684\uff0c\u518d\u70b9\u8fdb\u53bb\uff0c\u53d1\u73b0HTTPSConnectionPool\u662f\u7ee7\u627fHTTPConnectionPool\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u67e5\u770bHTTPConnectionPool\u7684\u5c31\u884c\u4e86\uff0c\u6700\u7ec8\u7684\u5730\u5740\uff1a connectionpool.py \u6ce8\u610f\u770b\u8fd9\u91cc\uff1a urlopen \"\"\" Get a connection from the pool and perform an HTTP request. This is the lowest level call for making a request, so you'll need to specify all the raw details. \"\"\" \u4ece\u6c60\u4e2d\u83b7\u53d6\u8fde\u63a5\u5e76\u6267\u884cHTTP\u8bf7\u6c42\u3002\u8fd9\u5c31\u662f\u8bf7\u6c42\u7684\u6700\u4f4e\u7ea7\u522b\u8c03\u7528\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u539f\u59cb\u7ec6\u8282\u3002 \u6700\u7ec8\u627e\u5230\u521b\u5efa\u8fde\u63a5\u7684\u5730\u65b9\uff1a connection.py # This function is copied from socket.py in the Python 2.7 standard # library test suite. Added to its signature is only `socket_options`. # One additional modification is that we avoid binding to IPv6 servers # discovered in DNS if the system doesn't have IPv6 functionality. def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None): \"\"\"Connect to *address* and return the socket object. Convenience function. Connect to *address* (a 2-tuple ``(host, port)``) and return the socket object. Passing the optional *timeout* parameter will set the timeout on the socket instance before attempting to connect. If no *timeout* is supplied, the global default timeout setting returned by :func:`getdefaulttimeout` is used. If *source_address* is set it must be a tuple of (host, port) for the socket to bind as a source address before making the connection. An host of '' or port 0 tells the OS to use the default. \"\"\" host, port = address if host.startswith('['): host = host.strip('[]') err = None # Using the value from allowed_gai_family() in the context of getaddrinfo lets # us select whether to work with IPv4 DNS records, IPv6 records, or both. # The original create_connection function always returns all records. family = allowed_gai_family() for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM): af, socktype, proto, canonname, sa = res sock = None try: sock = socket.socket(af, socktype, proto) # If provided, set socket level options before connecting. _set_socket_options(sock, socket_options) if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT: sock.settimeout(timeout) if source_address: sock.bind(source_address) sock.connect(sa) return sock except socket.error as e: err = e if sock is not None: sock.close() sock = None if err is not None: raise err raise socket.error(\"getaddrinfo returns an empty list\") \u6ce8\u91ca\u8fd9\u6837\u5199\uff1a \u6b64\u51fd\u6570\u4ecePython 2.7\u6807\u51c6\u5e93\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684socket.py\u590d\u5236\u3002 \u6dfb\u52a0\u5230\u5b83\u7684\u7b7e\u540d\u53ea\u662f socket_options \u3002 \u53e6\u4e00\u4e2a\u4fee\u6539\u662f\uff0c\u5982\u679c\u7cfb\u7edf\u6ca1\u6709IPv6\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u907f\u514d\u7ed1\u5b9a\u5230\u5728DNS\u4e2d\u53d1\u73b0\u7684IPv6\u670d\u52a1\u5668\u3002 \u5176\u4e2d\u5173\u952e\u4ee3\u7801\u662f\uff1a sock = socket.socket(af, socktype, proto) sock.bind(source_address) sock.connect(sa) \u5e95\u5c42\u662fPython\u7684socket\u7f16\u7a0b\uff0cPython \u4e2d\uff0c\u6211\u4eec\u7528 socket\uff08\uff09\u51fd\u6570\u6765\u521b\u5efa\u5957\u63a5\u5b57\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a socket.socket([family[, type[, proto]]]) \u51fd\u6570 \u63cf\u8ff0 s.bind() \u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u7ed1\u5b9a\u5730\u5740\uff08host,port\uff09 s.settimeout(timeout) \u8bbe\u7f6e\u5957\u63a5\u5b57\u64cd\u4f5c\u7684\u8d85\u65f6\u671f s.connect() \u4e3b\u52a8\u521d\u59cb\u5316TCP\u670d\u52a1\u5668\u8fde\u63a5 s.recv() \u63a5\u6536TCP\u6570\u636e s.close() \u5173\u95ed\u5957\u63a5\u5b57 \u66f4\u591a\u7ec6\u8282\u53c2\u8003\uff1a Python3 \u7f51\u7edc\u7f16\u7a0b \u5173\u4e8e\u53d1\u9001\u8bf7\u6c42\u7684\u7ec6\u8282\uff1a def request_chunked(self, method, url, body=None, headers=None): \"\"\" Alternative to the common request method, which sends the body with chunked encoding and not as one block \"\"\" headers = HTTPHeaderDict(headers if headers is not None else {}) skip_accept_encoding = 'accept-encoding' in headers skip_host = 'host' in headers self.putrequest( method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host ) for header, value in headers.items(): self.putheader(header, value) if 'transfer-encoding' not in headers: self.putheader('Transfer-Encoding', 'chunked') self.endheaders() if body is not None: stringish_types = six.string_types + (six.binary_type,) if isinstance(body, stringish_types): body = (body,) for chunk in body: if not chunk: continue if not isinstance(chunk, six.binary_type): chunk = chunk.encode('utf8') len_str = hex(len(chunk))[2:] self.send(len_str.encode('utf-8')) self.send(b'\\r\\n') self.send(chunk) self.send(b'\\r\\n') # After the if clause, to always have a closed body self.send(b'0\\r\\n\\r\\n') \u83b7\u53d6response def read(self, amt=None): if self.fp is None: return b\"\" if self._method == \"HEAD\": self._close_conn() return b\"\" if amt is not None: # Amount is given, implement using readinto b = bytearray(amt) n = self.readinto(b) return memoryview(b)[:n].tobytes() else: # Amount is not given (unbounded read) so we must check self.length # and self.chunked if self.chunked: return self._readall_chunked() if self.length is None: s = self.fp.read() else: try: s = self._safe_read(self.length) except IncompleteRead: self._close_conn() raise self.length = 0 self._close_conn() # we read everything return s \u770b\u5230\u8fd9\u91cc\uff0c\u8d8a\u6765\u8d8a\u611f\u89c9\u5230\u81ea\u5df1\u7684\u65e0\u77e5\uff0c\u4ec0\u4e48\u6837\u7684\u4eba\u624d\u80fd\u5199\u51fa\u8fd9\u4e48\u725b\u903c\u7684\u4ee3\u7801\u554a\u3002\u7ed9\u5927\u4f6c\u8dea\u4e86\u3002\u3002\u3002","title":"Requests\u6e90\u7801\u5206\u6790"},{"location":"requests/request_source_code/#requests","text":"\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u770b\u770brequests\u662f\u5982\u4f55\u53d1\u9001\u4e00\u4e2arequest\u7684\uff0c\u8fd9\u4e00\u8282\u5185\u5bb9\u53ef\u80fd\u6bd4\u8f83\u591a\uff0c\u6709\u5f88\u591a\u5e95\u5c42\u4ee3\u7801\uff0c\u6211\u81ea\u5df1\u4e5f\u770b\u7684\u5934\u75bc\uff0c\u5efa\u8bae\u9605\u8bfb\u524d\u5148\u559d\u74f6\u9178\u5976\u4ee5\u4fdd\u6301\u8f7b\u677e\u7684\u5fc3\u60c5\u3002\u5982\u679c\u4f60\u51c6\u5907\u597d\u4e86\uff0c\u8bf7\u5f80\u4e0b\u770b\u3002 \u6211\u4eec\u5728Pycharm\u4e2d\u6309\u4f4fwin\u70b9\u51fbget\uff0c\u4f1a\u6765\u5230get\u65b9\u6cd5\u7684\u6e90\u7801\uff1a def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response <Response>` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) \u53d1\u73b0\u8c03\u7528\u4e86request\u65b9\u6cd5\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b def request(method, url, **kwargs): \"\"\"Constructs and sends a :class:`Request <Request>`. :param method: method for the new :class:`Request` object. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`. :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`. :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`. :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload. ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')`` or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers to add for the file. :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How many seconds to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy. :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to ``True``. :param stream: (optional) if ``False``, the response content will be immediately downloaded. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :return: :class:`Response <Response>` object :rtype: requests.Response Usage:: >>> import requests >>> req = requests.request('GET', 'https://httpbin.org/get') <Response [200]> \"\"\" # By using the 'with' statement we are sure the session is closed, thus we # avoid leaving sockets open which can trigger a ResourceWarning in some # cases, and look like a memory leak in others. with sessions.Session() as session: return session.request(method=method, url=url, **kwargs) \u8fd9\u91cc\u5c31\u5bf9\u6240\u6709requests\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u505a\u4e86\u4e00\u4e00\u89e3\u91ca\uff0c\u5728\u516c\u4f17\u53f7\u6587\u7ae0\u6709\u7ffb\u8bd1\uff1a \u5927\u4f6c\u7684\u8bdd\uff08\u4e00\uff09 \u3002\u770b\u5230\uff0c\u8fd9\u91cc\u662f\u542f\u7528\u4e86\u4e00\u4e2asession(\u5728 HTTP\u534f\u8bae \u4e2d\u8bb2\u7684\u4f1a\u8bdd)\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\uff1a def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None): \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it. Returns :class:`Response <Response>` object. :param method: method for the new :class:`Request` object. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`. :param json: (optional) json to send in the body of the :class:`Request`. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`. :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`. :param files: (optional) Dictionary of ``'filename': file-like-objects`` for multipart encoding upload. :param auth: (optional) Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple :param allow_redirects: (optional) Set to True by default. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy. :param stream: (optional) whether to immediately download the response content. Defaults to ``False``. :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to ``True``. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :rtype: requests.Response \"\"\" # Create the Request. req = Request( method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks, ) prep = self.prepare_request(req) proxies = proxies or {} settings = self.merge_environment_settings( prep.url, proxies, stream, verify, cert ) # Send the request. send_kwargs = { 'timeout': timeout, 'allow_redirects': allow_redirects, } send_kwargs.update(settings) resp = self.send(prep, **send_kwargs) return resp \u628a\u6240\u6709\u7684\u53c2\u6570\u52a0\u8d77\u6765\uff0c\u521b\u5efa\u4e86\u4e00\u4e2aRequest\uff0c\u53d1\u9001\u8fd9\u4e2aRequest\uff0c\u8c03\u7528\u4e86 self.send \u65b9\u6cd5 def send(self, request, **kwargs): \"\"\"Send a given PreparedRequest. :rtype: requests.Response \"\"\" # Set defaults that the hooks can utilize to ensure they always have # the correct parameters to reproduce the previous request. kwargs.setdefault('stream', self.stream) kwargs.setdefault('verify', self.verify) kwargs.setdefault('cert', self.cert) kwargs.setdefault('proxies', self.proxies) # It's possible that users might accidentally send a Request object. # Guard against that specific failure case. if isinstance(request, Request): raise ValueError('You can only send PreparedRequests.') # Set up variables needed for resolve_redirects and dispatching of hooks allow_redirects = kwargs.pop('allow_redirects', True) stream = kwargs.get('stream') hooks = request.hooks # Get the appropriate adapter to use adapter = self.get_adapter(url=request.url) # Start time (approximately) of the request start = preferred_clock() # Send the request r = adapter.send(request, **kwargs) # Total elapsed time of the request (approximately) elapsed = preferred_clock() - start r.elapsed = timedelta(seconds=elapsed) # Response manipulation hooks r = dispatch_hook('response', hooks, r, **kwargs) # Persist cookies if r.history: # If the hooks create history then we want those cookies too for resp in r.history: extract_cookies_to_jar(self.cookies, resp.request, resp.raw) extract_cookies_to_jar(self.cookies, request, r.raw) # Redirect resolving generator. gen = self.resolve_redirects(r, request, **kwargs) # Resolve redirects if allowed. history = [resp for resp in gen] if allow_redirects else [] # Shuffle things around if there's history. if history: # Insert the first (original) request at the start history.insert(0, r) # Get the last request made r = history.pop() r.history = history # If redirects aren't being followed, store the response on the Request for Response.next(). if not allow_redirects: try: r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs)) except StopIteration: pass if not stream: r.content return r \u53d1\u9001request\u662f\u8c03\u7528 r = adapter.send(request, **kwargs) \u8fd9\u4e00\u884c\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\uff0c def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None): \"\"\"Sends PreparedRequest object. Returns Response object. :param request: The :class:`PreparedRequest <PreparedRequest>` being sent. :param stream: (optional) Whether to stream the request content. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple. :type timeout: float or tuple or urllib3 Timeout object :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use :param cert: (optional) Any user-provided SSL certificate to be trusted. :param proxies: (optional) The proxies dictionary to apply to the request. :rtype: requests.Response \"\"\" try: conn = self.get_connection(request.url, proxies) except LocationValueError as e: raise InvalidURL(e, request=request) self.cert_verify(conn, request.url, verify, cert) url = self.request_url(request, proxies) self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies) chunked = not (request.body is None or 'Content-Length' in request.headers) if isinstance(timeout, tuple): try: connect, read = timeout timeout = TimeoutSauce(connect=connect, read=read) except ValueError as e: # this may raise a string formatting error. err = (\"Invalid timeout {}. Pass a (connect, read) \" \"timeout tuple, or a single float to set \" \"both timeouts to the same value\".format(timeout)) raise ValueError(err) elif isinstance(timeout, TimeoutSauce): pass else: timeout = TimeoutSauce(connect=timeout, read=timeout) try: if not chunked: resp = conn.urlopen( method=request.method, url=url, body=request.body, headers=request.headers, redirect=False, assert_same_host=False, preload_content=False, decode_content=False, retries=self.max_retries, timeout=timeout ) # Send the request. else: if hasattr(conn, 'proxy_pool'): conn = conn.proxy_pool low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT) try: low_conn.putrequest(request.method, url, skip_accept_encoding=True) for header, value in request.headers.items(): low_conn.putheader(header, value) low_conn.endheaders() for i in request.body: low_conn.send(hex(len(i))[2:].encode('utf-8')) low_conn.send(b'\\r\\n') low_conn.send(i) low_conn.send(b'\\r\\n') low_conn.send(b'0\\r\\n\\r\\n') # Receive the response from the server try: # For Python 2.7, use buffering of HTTP responses r = low_conn.getresponse(buffering=True) except TypeError: # For compatibility with Python 3.3+ r = low_conn.getresponse() resp = HTTPResponse.from_httplib( r, pool=conn, connection=low_conn, preload_content=False, decode_content=False ) except: # If we hit any problems here, clean up the connection. # Then, reraise so that we can handle the actual exception. low_conn.close() raise except (ProtocolError, socket.error) as err: raise ConnectionError(err, request=request) except MaxRetryError as e: if isinstance(e.reason, ConnectTimeoutError): # TODO: Remove this in 3.0.0: see #2811 if not isinstance(e.reason, NewConnectionError): raise ConnectTimeout(e, request=request) if isinstance(e.reason, ResponseError): raise RetryError(e, request=request) if isinstance(e.reason, _ProxyError): raise ProxyError(e, request=request) if isinstance(e.reason, _SSLError): # This branch is for urllib3 v1.22 and later. raise SSLError(e, request=request) raise ConnectionError(e, request=request) except ClosedPoolError as e: raise ConnectionError(e, request=request) except _ProxyError as e: raise ProxyError(e) except (_SSLError, _HTTPError) as e: if isinstance(e, _SSLError): # This branch is for urllib3 versions earlier than v1.22 raise SSLError(e, request=request) elif isinstance(e, ReadTimeoutError): raise ReadTimeout(e, request=request) else: raise return self.build_response(request, resp) \u7ee7\u7eed\u770b conn = self.get_connection(request.url, proxies) \u8fd9\u4e00\u6bb5\uff0c\u518d\u4e00\u5c42\u5c42\u5f80\u4e0b\u770b\uff0c\u770b\u5230\u8fd9\u91cc pool_classes_by_scheme = { 'http': HTTPConnectionPool, 'https': HTTPSConnectionPool, } \u53d1\u73b0\u8fd9\u91cc\u6709\u4e24\u4e2a\u8fde\u63a5\u6c60\uff0c\u4e00\u4e2a\u662f\u5904\u7406HTTP\u7684\u3001\u4e00\u4e2a\u662f\u5904\u7406HTTPS\u7684\uff0c\u518d\u70b9\u8fdb\u53bb\uff0c\u53d1\u73b0HTTPSConnectionPool\u662f\u7ee7\u627fHTTPConnectionPool\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u67e5\u770bHTTPConnectionPool\u7684\u5c31\u884c\u4e86\uff0c\u6700\u7ec8\u7684\u5730\u5740\uff1a connectionpool.py \u6ce8\u610f\u770b\u8fd9\u91cc\uff1a urlopen \"\"\" Get a connection from the pool and perform an HTTP request. This is the lowest level call for making a request, so you'll need to specify all the raw details. \"\"\" \u4ece\u6c60\u4e2d\u83b7\u53d6\u8fde\u63a5\u5e76\u6267\u884cHTTP\u8bf7\u6c42\u3002\u8fd9\u5c31\u662f\u8bf7\u6c42\u7684\u6700\u4f4e\u7ea7\u522b\u8c03\u7528\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u539f\u59cb\u7ec6\u8282\u3002 \u6700\u7ec8\u627e\u5230\u521b\u5efa\u8fde\u63a5\u7684\u5730\u65b9\uff1a connection.py # This function is copied from socket.py in the Python 2.7 standard # library test suite. Added to its signature is only `socket_options`. # One additional modification is that we avoid binding to IPv6 servers # discovered in DNS if the system doesn't have IPv6 functionality. def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None): \"\"\"Connect to *address* and return the socket object. Convenience function. Connect to *address* (a 2-tuple ``(host, port)``) and return the socket object. Passing the optional *timeout* parameter will set the timeout on the socket instance before attempting to connect. If no *timeout* is supplied, the global default timeout setting returned by :func:`getdefaulttimeout` is used. If *source_address* is set it must be a tuple of (host, port) for the socket to bind as a source address before making the connection. An host of '' or port 0 tells the OS to use the default. \"\"\" host, port = address if host.startswith('['): host = host.strip('[]') err = None # Using the value from allowed_gai_family() in the context of getaddrinfo lets # us select whether to work with IPv4 DNS records, IPv6 records, or both. # The original create_connection function always returns all records. family = allowed_gai_family() for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM): af, socktype, proto, canonname, sa = res sock = None try: sock = socket.socket(af, socktype, proto) # If provided, set socket level options before connecting. _set_socket_options(sock, socket_options) if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT: sock.settimeout(timeout) if source_address: sock.bind(source_address) sock.connect(sa) return sock except socket.error as e: err = e if sock is not None: sock.close() sock = None if err is not None: raise err raise socket.error(\"getaddrinfo returns an empty list\") \u6ce8\u91ca\u8fd9\u6837\u5199\uff1a \u6b64\u51fd\u6570\u4ecePython 2.7\u6807\u51c6\u5e93\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684socket.py\u590d\u5236\u3002 \u6dfb\u52a0\u5230\u5b83\u7684\u7b7e\u540d\u53ea\u662f socket_options \u3002 \u53e6\u4e00\u4e2a\u4fee\u6539\u662f\uff0c\u5982\u679c\u7cfb\u7edf\u6ca1\u6709IPv6\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u907f\u514d\u7ed1\u5b9a\u5230\u5728DNS\u4e2d\u53d1\u73b0\u7684IPv6\u670d\u52a1\u5668\u3002 \u5176\u4e2d\u5173\u952e\u4ee3\u7801\u662f\uff1a sock = socket.socket(af, socktype, proto) sock.bind(source_address) sock.connect(sa) \u5e95\u5c42\u662fPython\u7684socket\u7f16\u7a0b\uff0cPython \u4e2d\uff0c\u6211\u4eec\u7528 socket\uff08\uff09\u51fd\u6570\u6765\u521b\u5efa\u5957\u63a5\u5b57\uff0c\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a socket.socket([family[, type[, proto]]]) \u51fd\u6570 \u63cf\u8ff0 s.bind() \u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u7ed1\u5b9a\u5730\u5740\uff08host,port\uff09 s.settimeout(timeout) \u8bbe\u7f6e\u5957\u63a5\u5b57\u64cd\u4f5c\u7684\u8d85\u65f6\u671f s.connect() \u4e3b\u52a8\u521d\u59cb\u5316TCP\u670d\u52a1\u5668\u8fde\u63a5 s.recv() \u63a5\u6536TCP\u6570\u636e s.close() \u5173\u95ed\u5957\u63a5\u5b57 \u66f4\u591a\u7ec6\u8282\u53c2\u8003\uff1a Python3 \u7f51\u7edc\u7f16\u7a0b \u5173\u4e8e\u53d1\u9001\u8bf7\u6c42\u7684\u7ec6\u8282\uff1a def request_chunked(self, method, url, body=None, headers=None): \"\"\" Alternative to the common request method, which sends the body with chunked encoding and not as one block \"\"\" headers = HTTPHeaderDict(headers if headers is not None else {}) skip_accept_encoding = 'accept-encoding' in headers skip_host = 'host' in headers self.putrequest( method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host ) for header, value in headers.items(): self.putheader(header, value) if 'transfer-encoding' not in headers: self.putheader('Transfer-Encoding', 'chunked') self.endheaders() if body is not None: stringish_types = six.string_types + (six.binary_type,) if isinstance(body, stringish_types): body = (body,) for chunk in body: if not chunk: continue if not isinstance(chunk, six.binary_type): chunk = chunk.encode('utf8') len_str = hex(len(chunk))[2:] self.send(len_str.encode('utf-8')) self.send(b'\\r\\n') self.send(chunk) self.send(b'\\r\\n') # After the if clause, to always have a closed body self.send(b'0\\r\\n\\r\\n') \u83b7\u53d6response def read(self, amt=None): if self.fp is None: return b\"\" if self._method == \"HEAD\": self._close_conn() return b\"\" if amt is not None: # Amount is given, implement using readinto b = bytearray(amt) n = self.readinto(b) return memoryview(b)[:n].tobytes() else: # Amount is not given (unbounded read) so we must check self.length # and self.chunked if self.chunked: return self._readall_chunked() if self.length is None: s = self.fp.read() else: try: s = self._safe_read(self.length) except IncompleteRead: self._close_conn() raise self.length = 0 self._close_conn() # we read everything return s \u770b\u5230\u8fd9\u91cc\uff0c\u8d8a\u6765\u8d8a\u611f\u89c9\u5230\u81ea\u5df1\u7684\u65e0\u77e5\uff0c\u4ec0\u4e48\u6837\u7684\u4eba\u624d\u80fd\u5199\u51fa\u8fd9\u4e48\u725b\u903c\u7684\u4ee3\u7801\u554a\u3002\u7ed9\u5927\u4f6c\u8dea\u4e86\u3002\u3002\u3002","title":"Requests\u6e90\u7801\u5206\u6790"}]}